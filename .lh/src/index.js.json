{
    "sourceFile": "src/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1759684170972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759684180500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,8 @@\n app.get('/', (req, res) => {\n   res.status(200).json({ message: 'API EPI-Backend está funcionando!' });\n });\n \n-// --- Adicione suas rotas aqui ---\n // --- Rotas da Aplicação ---\n app.use('/api/auth', authRoutes);\n \n // Porta do servidor\n"
                },
                {
                    "date": 1759684244406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,51 @@\n+// Carrega as variáveis de ambiente do arquivo .env\n+require('dotenv').config();\n+\n+// Inicializa o Firebase Admin SDK\n+require('./config/firebase');\n+\n+const express = require('express');\n+const cors = require('cors');\n+const helmet = require('helmet');\n+const morgan = require('morgan');\n+const rateLimit = require('express-rate-limit');\n+\n+// Importa as rotas\n+const authRoutes = require('./routes/authRoutes');\n+const authRoutes = require('./authRoutes');\n+\n+const app = express();\n+\n+// Middlewares de segurança e utilitários\n+app.use(helmet()); // Adiciona cabeçalhos de segurança\n+app.use(cors()); // Habilita Cross-Origin Resource Sharing\n+app.use(morgan('dev')); // Logger de requisições HTTP\n+app.use(express.json()); // Parser para body de requisições JSON\n+app.use(express.urlencoded({ extended: true })); // Parser para body de requisições URL-encoded\n+\n+// Middleware de limite de requisições\n+const limiter = rateLimit({\n+  windowMs: 15 * 60 * 1000, // 15 minutos\n+  max: 100, // Limita cada IP a 100 requisições por janela\n+  standardHeaders: true, // Retorna informações do limite nos cabeçalhos `RateLimit-*`\n+  legacyHeaders: false, // Desabilita os cabeçalhos `X-RateLimit-*`\n+  message: 'Muitas requisições vindas deste IP, por favor tente novamente após 15 minutos.',\n+});\n+app.use(limiter);\n+\n+// Rota de teste inicial\n+app.get('/', (req, res) => {\n+  res.status(200).json({ message: 'API EPI-Backend está funcionando!' });\n+});\n+\n+// --- Rotas da Aplicação ---\n+app.use('/api/auth', authRoutes);\n+\n+// Porta do servidor\n+const PORT = process.env.PORT || 8080;\n+\n+app.listen(PORT, () => {\n+  console.log(`Servidor rodando na porta ${PORT}`);\n+});\n+\n+module.exports = app;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1759684666804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,59 +10,9 @@\n const morgan = require('morgan');\n const rateLimit = require('express-rate-limit');\n \n // Importa as rotas\n-const authRoutes = require('./routes/authRoutes');\n const authRoutes = require('./authRoutes');\n-\n-const app = express();\n-\n-// Middlewares de segurança e utilitários\n-app.use(helmet()); // Adiciona cabeçalhos de segurança\n-app.use(cors()); // Habilita Cross-Origin Resource Sharing\n-app.use(morgan('dev')); // Logger de requisições HTTP\n-app.use(express.json()); // Parser para body de requisições JSON\n-app.use(express.urlencoded({ extended: true })); // Parser para body de requisições URL-encoded\n-\n-// Middleware de limite de requisições\n-const limiter = rateLimit({\n-  windowMs: 15 * 60 * 1000, // 15 minutos\n-  max: 100, // Limita cada IP a 100 requisições por janela\n-  standardHeaders: true, // Retorna informações do limite nos cabeçalhos `RateLimit-*`\n-  legacyHeaders: false, // Desabilita os cabeçalhos `X-RateLimit-*`\n-  message: 'Muitas requisições vindas deste IP, por favor tente novamente após 15 minutos.',\n-});\n-app.use(limiter);\n-\n-// Rota de teste inicial\n-app.get('/', (req, res) => {\n-  res.status(200).json({ message: 'API EPI-Backend está funcionando!' });\n-});\n-\n-// --- Rotas da Aplicação ---\n-app.use('/api/auth', authRoutes);\n-\n-// Porta do servidor\n-const PORT = process.env.PORT || 8080;\n-\n-app.listen(PORT, () => {\n-  console.log(`Servidor rodando na porta ${PORT}`);\n-});\n-\n-module.exports = app;\n-// Carrega as variáveis de ambiente do arquivo .env\n-require('dotenv').config();\n-\n-// Inicializa o Firebase Admin SDK\n-require('./config/firebase');\n-\n-const express = require('express');\n-const cors = require('cors');\n-const helmet = require('helmet');\n-const morgan = require('morgan');\n-const rateLimit = require('express-rate-limit');\n-\n-// Importa as rotas\n const authRoutes = require('./routes/authRoutes');\n \n const app = express();\n \n"
                },
                {
                    "date": 1759685313645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n // --- Rotas da Aplicação ---\n app.use('/api/auth', authRoutes);\n \n // Porta do servidor\n-const PORT = process.env.PORT || 8080;\n+const PORT = process.env.PORT || 8081;\n \n app.listen(PORT, () => {\n   console.log(`Servidor rodando na porta ${PORT}`);\n });\n"
                },
                {
                    "date": 1759699046719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,10 +10,10 @@\n const morgan = require('morgan');\n const rateLimit = require('express-rate-limit');\n \n // Importa as rotas\n-const authRoutes = require('./authRoutes');\n const authRoutes = require('./routes/authRoutes');\n+const epiRoutes = require('./routes/epiRoutes');\n \n const app = express();\n \n // Middlewares de segurança e utilitários\n@@ -39,8 +39,9 @@\n });\n \n // --- Rotas da Aplicação ---\n app.use('/api/auth', authRoutes);\n+app.use('/api/epis', epiRoutes);\n \n // Porta do servidor\n const PORT = process.env.PORT || 8081;\n \n"
                },
                {
                    "date": 1759701276533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n \n // Importa as rotas\n const authRoutes = require('./routes/authRoutes');\n const epiRoutes = require('./routes/epiRoutes');\n+const colaboradorRoutes = require('./routes/colaboradorRoutes');\n \n const app = express();\n \n // Middlewares de segurança e utilitários\n@@ -40,8 +41,9 @@\n \n // --- Rotas da Aplicação ---\n app.use('/api/auth', authRoutes);\n app.use('/api/epis', epiRoutes);\n+app.use('/api/colaboradores', colaboradorRoutes);\n \n // Porta do servidor\n const PORT = process.env.PORT || 8081;\n \n"
                },
                {
                    "date": 1759702969133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n // Importa as rotas\n const authRoutes = require('./routes/authRoutes');\n const epiRoutes = require('./routes/epiRoutes');\n const colaboradorRoutes = require('./routes/colaboradorRoutes');\n+const entregaRoutes = require('./routes/entregaRoutes');\n \n const app = express();\n \n // Middlewares de segurança e utilitários\n@@ -42,8 +43,9 @@\n // --- Rotas da Aplicação ---\n app.use('/api/auth', authRoutes);\n app.use('/api/epis', epiRoutes);\n app.use('/api/colaboradores', colaboradorRoutes);\n+app.use('/api/entregas', entregaRoutes);\n \n // Porta do servidor\n const PORT = process.env.PORT || 8081;\n \n"
                },
                {
                    "date": 1759704471544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n const authRoutes = require('./routes/authRoutes');\n const epiRoutes = require('./routes/epiRoutes');\n const colaboradorRoutes = require('./routes/colaboradorRoutes');\n const entregaRoutes = require('./routes/entregaRoutes');\n+const dashboardRoutes = require('./routes/dashboardRoutes');\n \n const app = express();\n \n // Middlewares de segurança e utilitários\n@@ -44,8 +45,9 @@\n app.use('/api/auth', authRoutes);\n app.use('/api/epis', epiRoutes);\n app.use('/api/colaboradores', colaboradorRoutes);\n app.use('/api/entregas', entregaRoutes);\n+app.use('/api/dashboard', dashboardRoutes);\n \n // Porta do servidor\n const PORT = process.env.PORT || 8081;\n \n"
                }
            ],
            "date": 1759684170972,
            "name": "Commit-0",
            "content": "// Carrega as variáveis de ambiente do arquivo .env\nrequire('dotenv').config();\n\n// Inicializa o Firebase Admin SDK\nrequire('./config/firebase');\n\nconst express = require('express');\nconst cors = require('cors');\nconst helmet = require('helmet');\nconst morgan = require('morgan');\nconst rateLimit = require('express-rate-limit');\n\n// Importa as rotas\nconst authRoutes = require('./routes/authRoutes');\n\nconst app = express();\n\n// Middlewares de segurança e utilitários\napp.use(helmet()); // Adiciona cabeçalhos de segurança\napp.use(cors()); // Habilita Cross-Origin Resource Sharing\napp.use(morgan('dev')); // Logger de requisições HTTP\napp.use(express.json()); // Parser para body de requisições JSON\napp.use(express.urlencoded({ extended: true })); // Parser para body de requisições URL-encoded\n\n// Middleware de limite de requisições\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutos\n  max: 100, // Limita cada IP a 100 requisições por janela\n  standardHeaders: true, // Retorna informações do limite nos cabeçalhos `RateLimit-*`\n  legacyHeaders: false, // Desabilita os cabeçalhos `X-RateLimit-*`\n  message: 'Muitas requisições vindas deste IP, por favor tente novamente após 15 minutos.',\n});\napp.use(limiter);\n\n// Rota de teste inicial\napp.get('/', (req, res) => {\n  res.status(200).json({ message: 'API EPI-Backend está funcionando!' });\n});\n\n// --- Adicione suas rotas aqui ---\n// --- Rotas da Aplicação ---\napp.use('/api/auth', authRoutes);\n\n// Porta do servidor\nconst PORT = process.env.PORT || 8080;\n\napp.listen(PORT, () => {\n  console.log(`Servidor rodando na porta ${PORT}`);\n});\n\nmodule.exports = app;"
        }
    ]
}