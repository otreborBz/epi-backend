{
    "sourceFile": "src/controllers/colaboradorController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1759701278806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759704907650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,16 +86,38 @@\n };\n \n /**\n  * Exclui um colaborador do Firestore.\n+ * Exclui um colaborador e todos os seus registros de entrega do Firestore.\n  */\n const deleteColaborador = async (req, res) => {\n   try {\n     const { id } = req.params;\n     await db.collection('colaboradores').doc(id).delete();\n     return res.status(200).json({ message: 'Colaborador excluído com sucesso.' });\n+\n+    // 1. Encontrar todos os registros de entrega para este colaborador\n+    const entregasSnapshot = await db.collection('entregas').where('colaboradorId', '==', id).get();\n+\n+    // 2. Usar um batch para deletar todos os documentos em uma única operação\n+    const batch = db.batch();\n+\n+    // Adicionar cada entrega ao batch para exclusão\n+    entregasSnapshot.forEach(doc => {\n+      batch.delete(doc.ref);\n+    });\n+\n+    // 3. Adicionar o próprio colaborador ao batch para exclusão\n+    const colaboradorRef = db.collection('colaboradores').doc(id);\n+    batch.delete(colaboradorRef);\n+\n+    // 4. Executar o batch\n+    await batch.commit();\n+\n+    return res.status(200).json({ message: 'Colaborador e seus registros de entrega foram excluídos com sucesso.' });\n   } catch (error) {\n     console.error('Erro ao excluir colaborador:', error);\n+    console.error('Erro ao excluir colaborador e suas entregas:', error);\n     return res.status(500).json({ error: 'Erro interno do servidor ao excluir colaborador.' });\n   }\n };\n \n"
                },
                {
                    "date": 1759704915965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,16 +85,13 @@\n   }\n };\n \n /**\n- * Exclui um colaborador do Firestore.\n  * Exclui um colaborador e todos os seus registros de entrega do Firestore.\n  */\n const deleteColaborador = async (req, res) => {\n   try {\n     const { id } = req.params;\n-    await db.collection('colaboradores').doc(id).delete();\n-    return res.status(200).json({ message: 'Colaborador excluído com sucesso.' });\n \n     // 1. Encontrar todos os registros de entrega para este colaborador\n     const entregasSnapshot = await db.collection('entregas').where('colaboradorId', '==', id).get();\n \n@@ -114,9 +111,8 @@\n     await batch.commit();\n \n     return res.status(200).json({ message: 'Colaborador e seus registros de entrega foram excluídos com sucesso.' });\n   } catch (error) {\n-    console.error('Erro ao excluir colaborador:', error);\n     console.error('Erro ao excluir colaborador e suas entregas:', error);\n     return res.status(500).json({ error: 'Erro interno do servidor ao excluir colaborador.' });\n   }\n };\n"
                }
            ],
            "date": 1759701278806,
            "name": "Commit-0",
            "content": "const { db } = require('../config/firebase');\n\n/**\n * Cria um novo colaborador no Firestore.\n */\nconst createColaborador = async (req, res) => {\n  try {\n    const { nome, RE, data_admissao, setor, funcao } = req.body;\n\n    if (!nome || !RE || !data_admissao || !setor || !funcao) {\n      return res.status(400).json({\n        error: 'Todos os campos são obrigatórios: nome, RE, data_admissao, setor, funcao.',\n      });\n    }\n\n    const colaboradorData = {\n      nome,\n      RE,\n      data_admissao,\n      setor,\n      funcao,\n      createdAt: new Date().toISOString(),\n    };\n\n    const colaboradorRef = await db.collection('colaboradores').add(colaboradorData);\n\n    return res.status(201).json({ id: colaboradorRef.id, ...colaboradorData });\n  } catch (error) {\n    console.error('Erro ao criar colaborador:', error);\n    return res.status(500).json({ error: 'Erro interno do servidor ao criar colaborador.' });\n  }\n};\n\n/**\n * Busca todos os colaboradores no Firestore.\n */\nconst getAllColaboradores = async (req, res) => {\n  try {\n    const snapshot = await db.collection('colaboradores').get();\n    const colaboradores = [];\n    snapshot.forEach(doc => {\n      colaboradores.push({ id: doc.id, ...doc.data() });\n    });\n    return res.status(200).json(colaboradores);\n  } catch (error) {\n    console.error('Erro ao buscar colaboradores:', error);\n    return res.status(500).json({ error: 'Erro interno do servidor ao buscar colaboradores.' });\n  }\n};\n\n/**\n * Busca um colaborador específico pelo seu ID.\n */\nconst getColaboradorById = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const doc = await db.collection('colaboradores').doc(id).get();\n\n    if (!doc.exists) {\n      return res.status(404).json({ error: 'Colaborador não encontrado.' });\n    }\n\n    return res.status(200).json({ id: doc.id, ...doc.data() });\n  } catch (error) {\n    console.error('Erro ao buscar colaborador por ID:', error);\n    return res.status(500).json({ error: 'Erro interno do servidor ao buscar colaborador.' });\n  }\n};\n\n/**\n * Atualiza um colaborador existente no Firestore.\n */\nconst updateColaborador = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const data = req.body;\n    const colaboradorRef = db.collection('colaboradores').doc(id);\n\n    await colaboradorRef.update(data);\n\n    return res.status(200).json({ message: 'Colaborador atualizado com sucesso.' });\n  } catch (error) {\n    console.error('Erro ao atualizar colaborador:', error);\n    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar colaborador.' });\n  }\n};\n\n/**\n * Exclui um colaborador do Firestore.\n */\nconst deleteColaborador = async (req, res) => {\n  try {\n    const { id } = req.params;\n    await db.collection('colaboradores').doc(id).delete();\n    return res.status(200).json({ message: 'Colaborador excluído com sucesso.' });\n  } catch (error) {\n    console.error('Erro ao excluir colaborador:', error);\n    return res.status(500).json({ error: 'Erro interno do servidor ao excluir colaborador.' });\n  }\n};\n\nmodule.exports = {\n  createColaborador,\n  getAllColaboradores,\n  getColaboradorById,\n  updateColaborador,\n  deleteColaborador,\n};"
        }
    ]
}