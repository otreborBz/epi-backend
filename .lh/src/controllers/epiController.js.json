{
    "sourceFile": "src/controllers/epiController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 26,
            "patches": [
                {
                    "date": 1759699050781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759699670922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,7 +30,25 @@\n     return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\n   }\n };\n \n+/**\n+ * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\n+ */\n+const getAllEpis = async (req, res) => {\n+  try {\n+    const episSnapshot = await db.collection('epis').get();\n+    const epis = [];\n+    episSnapshot.forEach(doc => {\n+      epis.push({ id: doc.id, ...doc.data() });\n+    });\n+    return res.status(200).json(epis);\n+  } catch (error) {\n+    console.error('Erro ao buscar EPIs:', error);\n+    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\n+  }\n+};\n+\n module.exports = {\n   createEpi,\n+  getAllEpis,\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1759699904395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,8 +47,54 @@\n     return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\n   }\n };\n \n+/**\n+ * Atualiza um EPI existente no Firestore.\n+ */\n+const updateEpi = async (req, res) => {\n+  try {\n+    const { id } = req.params;\n+    const data = req.body;\n+\n+    if (!id) {\n+      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\n+    }\n+\n+    const epiRef = db.collection('epis').doc(id);\n+    const doc = await epiRef.get();\n+\n+    if (!doc.exists) {\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\n+    }\n+\n+    await epiRef.update(data);\n+\n+    return res.status(200).json({ id, ...data });\n+  } catch (error) {\n+    console.error('Erro ao atualizar EPI:', error);\n+    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\n+  }\n+};\n+\n+/**\n+ * Exclui um EPI do Firestore.\n+ */\n+const deleteEpi = async (req, res) => {\n+  try {\n+    const { id } = req.params;\n+\n+    await db.collection('epis').doc(id).delete();\n+\n+    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\n+  } catch (error) {\n+    console.error('Erro ao excluir EPI:', error);\n+    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\n+  }\n+};\n+\n module.exports = {\n   createEpi,\n   getAllEpis,\n+  updateEpi,\n+  deleteEpi,\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1759700730782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,8 +48,30 @@\n   }\n };\n \n /**\n+ * Busca um EPI específico pelo seu ID.\n+ */\n+const getEpiById = async (req, res) => {\n+  try {\n+    const { id } = req.params;\n+    const epiRef = db.collection('epis').doc(id);\n+    const doc = await epiRef.get();\n+\n+    if (!doc.exists) {\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\n+    }\n+\n+    return res.status(200).json({ id: doc.id, ...doc.data() });\n+  } catch (error) {\n+    console.error('Erro ao buscar EPI por ID:', error);\n+    return res\n+      .status(500)\n+      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\n+  }\n+};\n+\n+/**\n  * Atualiza um EPI existente no Firestore.\n  */\n const updateEpi = async (req, res) => {\n   try {\n@@ -94,7 +116,8 @@\n \n module.exports = {\n   createEpi,\n   getAllEpis,\n+  getEpiById,\n   updateEpi,\n   deleteEpi,\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1761589629710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,123 +1,125 @@\n-const { db } = require('../config/firebase');\n-\n-/**\n- * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\n- */\n-const createEpi = async (req, res) => {\n-  try {\n-    const { nome, ca, validade, quantidade } = req.body;\n-\n-    // Validação básica dos campos recebidos\n-    if (!nome || !ca || !validade || quantidade === undefined) {\n-      return res.status(400).json({\n-        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\n-      });\n-    }\n-\n-    const epiData = {\n-      nome,\n-      ca,\n-      validade, // A data de validade, ex: \"2028-12-31\"\n-      quantidade: Number(quantidade), // Garante que a quantidade seja um número\n-      createdAt: new Date().toISOString(),\n-    };\n-\n-    const epiRef = await db.collection('epis').add(epiData);\n-\n-    return res.status(201).json({ id: epiRef.id, ...epiData });\n-  } catch (error) {\n-    console.error('Erro ao criar EPI:', error);\n-    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\n-  }\n-};\n-\n-/**\n- * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\n- */\n-const getAllEpis = async (req, res) => {\n-  try {\n-    const episSnapshot = await db.collection('epis').get();\n-    const epis = [];\n-    episSnapshot.forEach(doc => {\n-      epis.push({ id: doc.id, ...doc.data() });\n-    });\n-    return res.status(200).json(epis);\n-  } catch (error) {\n-    console.error('Erro ao buscar EPIs:', error);\n-    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\n-  }\n-};\n-\n-/**\n- * Busca um EPI específico pelo seu ID.\n- */\n-const getEpiById = async (req, res) => {\n-  try {\n-    const { id } = req.params;\n-    const epiRef = db.collection('epis').doc(id);\n-    const doc = await epiRef.get();\n-\n-    if (!doc.exists) {\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\n-    }\n-\n-    return res.status(200).json({ id: doc.id, ...doc.data() });\n-  } catch (error) {\n-    console.error('Erro ao buscar EPI por ID:', error);\n-    return res\n-      .status(500)\n-      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\n-  }\n-};\n-\n-/**\n- * Atualiza um EPI existente no Firestore.\n- */\n-const updateEpi = async (req, res) => {\n-  try {\n-    const { id } = req.params;\n-    const data = req.body;\n-\n-    if (!id) {\n-      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\n-    }\n-\n-    const epiRef = db.collection('epis').doc(id);\n-    const doc = await epiRef.get();\n-\n-    if (!doc.exists) {\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\n-    }\n-\n-    await epiRef.update(data);\n-\n-    return res.status(200).json({ id, ...data });\n-  } catch (error) {\n-    console.error('Erro ao atualizar EPI:', error);\n-    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\n-  }\n-};\n-\n-/**\n- * Exclui um EPI do Firestore.\n- */\n-const deleteEpi = async (req, res) => {\n-  try {\n-    const { id } = req.params;\n-\n-    await db.collection('epis').doc(id).delete();\n-\n-    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\n-  } catch (error) {\n-    console.error('Erro ao excluir EPI:', error);\n-    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\n-  }\n-};\n-\n-module.exports = {\n-  createEpi,\n-  getAllEpis,\n-  getEpiById,\n-  updateEpi,\n-  deleteEpi,\n+const { db } = require('../config/firebase');\r\n+\r\n+/**\r\n+ * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n+ */\r\n+const createEpi = async (req, res) => {\r\n+  try {\r\n+    const { nome, ca, validade, quantidade } = req.body;\r\n+\r\n+    // Validação básica dos campos recebidos\r\n+    if (!nome || !ca || !validade || quantidade === undefined) {\r\n+      return res.status(400).json({\r\n+        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n+      });\r\n+    }\r\n+\r\n+    const epiData = {\r\n+      nome,\r\n+      ca,\r\n+      validade, // A data de validade, ex: \"2028-12-31\"\r\n+      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n+      createdAt: new Date().toISOString(),\r\n+    };\r\n+\r\n+    const epiRef = await db.collection('epis').add(epiData);\r\n+\r\n+    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n+  } catch (error) {\r\n+    console.error('Erro ao criar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n+ */\r\n+const getAllEpis = async (req, res) => {\r\n+  try {\r\n+    const episSnapshot = await db.collection('epis').get();\r\n+    const epis = [];\r\n+    episSnapshot.forEach(doc => {\r\n+      epis.push({ id: doc.id, ...doc.data() });\r\n+    });\r\n+    return res.status(200).json(epis);\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPIs:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca um EPI específico pelo seu ID.\r\n+ */\r\n+const getEpiById = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPI por ID:', error);\r\n+    return res\r\n+      .status(500)\r\n+      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Atualiza um EPI existente no Firestore.\r\n+ */\r\n+const updateEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const data = req.body;\r\n+\r\n+    if (!id) {\r\n+      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n+    }\r\n+\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    await epiRef.update(data);\r\n+\r\n+    return res.status(200).json({ id, ...data });\r\n+  } catch (error) {\r\n+    console.error('Erro ao atualizar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Exclui um EPI do Firestore.\r\n+ */\r\n+const deleteEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+\r\n+    await db.collection('epis').doc(id).delete();\r\n+\r\n+    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n+  } catch (error) {\r\n+    console.error('Erro ao excluir EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n+  }\r\n+};\r\n+\r\n+\r\n+\r\n+module.exports = {\r\n+  createEpi,\r\n+  getAllEpis,\r\n+  getEpiById,\r\n+  updateEpi,\r\n+  deleteEpi,\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1761589638860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,125 @@\n+const { db } = require('../config/firebase');\r\n+\r\n+/**\r\n+ * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n+ */\r\n+const createEpi = async (req, res) => {\r\n+  try {\r\n+    const { nome, ca, validade, quantidade } = req.body;\r\n+\r\n+    // Validação básica dos campos recebidos\r\n+    if (!nome || !ca || !validade || quantidade === undefined) {\r\n+      return res.status(400).json({\r\n+        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n+      });\r\n+    }\r\n+\r\n+    const epiData = {\r\n+      nome,\r\n+      ca,\r\n+      validade, // A data de validade, ex: \"2028-12-31\"\r\n+      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n+      createdAt: new Date().toISOString(),\r\n+    };\r\n+\r\n+    const epiRef = await db.collection('epis').add(epiData);\r\n+\r\n+    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n+  } catch (error) {\r\n+    console.error('Erro ao criar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n+ */\r\n+const getAllEpis = async (req, res) => {\r\n+  try {\r\n+    const episSnapshot = await db.collection('epis').get();\r\n+    const epis = [];\r\n+    episSnapshot.forEach(doc => {\r\n+      epis.push({ id: doc.id, ...doc.data() });\r\n+    });\r\n+    return res.status(200).json(epis);\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPIs:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca um EPI específico pelo seu ID.\r\n+ */\r\n+const getEpiById = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPI por ID:', error);\r\n+    return res\r\n+      .status(500)\r\n+      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Atualiza um EPI existente no Firestore.\r\n+ */\r\n+const updateEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const data = req.body;\r\n+\r\n+    if (!id) {\r\n+      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n+    }\r\n+\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    await epiRef.update(data);\r\n+\r\n+    return res.status(200).json({ id, ...data });\r\n+  } catch (error) {\r\n+    console.error('Erro ao atualizar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Exclui um EPI do Firestore.\r\n+ */\r\n+const deleteEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+\r\n+    await db.collection('epis').doc(id).delete();\r\n+\r\n+    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n+  } catch (error) {\r\n+    console.error('Erro ao excluir EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n+  }\r\n+};\r\n+\r\n+const teste = async (req, res) => {\r\n+\r\n+module.exports = {\r\n+  createEpi,\r\n+  getAllEpis,\r\n+  getEpiById,\r\n+  updateEpi,\r\n+  deleteEpi,\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1761589646498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,134 +114,11 @@\n   }\r\n };\r\n \r\n const teste = async (req, res) => {\r\n-\r\n-module.exports = {\r\n-  createEpi,\r\n-  getAllEpis,\r\n-  getEpiById,\r\n-  updateEpi,\r\n-  deleteEpi,\r\n-};\n-const { db } = require('../config/firebase');\r\n-\r\n-/**\r\n- * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n- */\r\n-const createEpi = async (req, res) => {\r\n-  try {\r\n-    const { nome, ca, validade, quantidade } = req.body;\r\n-\r\n-    // Validação básica dos campos recebidos\r\n-    if (!nome || !ca || !validade || quantidade === undefined) {\r\n-      return res.status(400).json({\r\n-        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n-      });\r\n-    }\r\n-\r\n-    const epiData = {\r\n-      nome,\r\n-      ca,\r\n-      validade, // A data de validade, ex: \"2028-12-31\"\r\n-      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n-      createdAt: new Date().toISOString(),\r\n-    };\r\n-\r\n-    const epiRef = await db.collection('epis').add(epiData);\r\n-\r\n-    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n-  } catch (error) {\r\n-    console.error('Erro ao criar EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n-  }\r\n+  \r\n };\r\n \r\n-/**\r\n- * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n- */\r\n-const getAllEpis = async (req, res) => {\r\n-  try {\r\n-    const episSnapshot = await db.collection('epis').get();\r\n-    const epis = [];\r\n-    episSnapshot.forEach(doc => {\r\n-      epis.push({ id: doc.id, ...doc.data() });\r\n-    });\r\n-    return res.status(200).json(epis);\r\n-  } catch (error) {\r\n-    console.error('Erro ao buscar EPIs:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Busca um EPI específico pelo seu ID.\r\n- */\r\n-const getEpiById = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const epiRef = db.collection('epis').doc(id);\r\n-    const doc = await epiRef.get();\r\n-\r\n-    if (!doc.exists) {\r\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n-    }\r\n-\r\n-    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n-  } catch (error) {\r\n-    console.error('Erro ao buscar EPI por ID:', error);\r\n-    return res\r\n-      .status(500)\r\n-      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Atualiza um EPI existente no Firestore.\r\n- */\r\n-const updateEpi = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const data = req.body;\r\n-\r\n-    if (!id) {\r\n-      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n-    }\r\n-\r\n-    const epiRef = db.collection('epis').doc(id);\r\n-    const doc = await epiRef.get();\r\n-\r\n-    if (!doc.exists) {\r\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n-    }\r\n-\r\n-    await epiRef.update(data);\r\n-\r\n-    return res.status(200).json({ id, ...data });\r\n-  } catch (error) {\r\n-    console.error('Erro ao atualizar EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Exclui um EPI do Firestore.\r\n- */\r\n-const deleteEpi = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-\r\n-    await db.collection('epis').doc(id).delete();\r\n-\r\n-    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n-  } catch (error) {\r\n-    console.error('Erro ao excluir EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n-  }\r\n-};\r\n-\r\n-\r\n-\r\n module.exports = {\r\n   createEpi,\r\n   getAllEpis,\r\n   getEpiById,\r\n"
                },
                {
                    "date": 1761589652977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,128 @@\n+const { db } = require('../config/firebase');\r\n+\r\n+/**\r\n+ * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n+ */\r\n+const createEpi = async (req, res) => {\r\n+  try {\r\n+    const { nome, ca, validade, quantidade } = req.body;\r\n+\r\n+    // Validação básica dos campos recebidos\r\n+    if (!nome || !ca || !validade || quantidade === undefined) {\r\n+      return res.status(400).json({\r\n+        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n+      });\r\n+    }\r\n+\r\n+    const epiData = {\r\n+      nome,\r\n+      ca,\r\n+      validade, // A data de validade, ex: \"2028-12-31\"\r\n+      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n+      createdAt: new Date().toISOString(),\r\n+    };\r\n+\r\n+    const epiRef = await db.collection('epis').add(epiData);\r\n+\r\n+    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n+  } catch (error) {\r\n+    console.error('Erro ao criar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n+ */\r\n+const getAllEpis = async (req, res) => {\r\n+  try {\r\n+    const episSnapshot = await db.collection('epis').get();\r\n+    const epis = [];\r\n+    episSnapshot.forEach(doc => {\r\n+      epis.push({ id: doc.id, ...doc.data() });\r\n+    });\r\n+    return res.status(200).json(epis);\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPIs:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca um EPI específico pelo seu ID.\r\n+ */\r\n+const getEpiById = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPI por ID:', error);\r\n+    return res\r\n+      .status(500)\r\n+      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Atualiza um EPI existente no Firestore.\r\n+ */\r\n+const updateEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const data = req.body;\r\n+\r\n+    if (!id) {\r\n+      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n+    }\r\n+\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    await epiRef.update(data);\r\n+\r\n+    return res.status(200).json({ id, ...data });\r\n+  } catch (error) {\r\n+    console.error('Erro ao atualizar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Exclui um EPI do Firestore.\r\n+ */\r\n+const deleteEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+\r\n+    await db.collection('epis').doc(id).delete();\r\n+\r\n+    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n+  } catch (error) {\r\n+    console.error('Erro ao excluir EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n+  }\r\n+};\r\n+\r\n+const teste = async (req, res) => {\r\n+  try {} catch (error) {\r\n+\r\n+};\r\n+\r\n+module.exports = {\r\n+  createEpi,\r\n+  getAllEpis,\r\n+  getEpiById,\r\n+  updateEpi,\r\n+  deleteEpi,\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1761589660438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,130 @@\n+const { db } = require('../config/firebase');\r\n+\r\n+/**\r\n+ * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n+ */\r\n+const createEpi = async (req, res) => {\r\n+  try {\r\n+    const { nome, ca, validade, quantidade } = req.body;\r\n+\r\n+    // Validação básica dos campos recebidos\r\n+    if (!nome || !ca || !validade || quantidade === undefined) {\r\n+      return res.status(400).json({\r\n+        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n+      });\r\n+    }\r\n+\r\n+    const epiData = {\r\n+      nome,\r\n+      ca,\r\n+      validade, // A data de validade, ex: \"2028-12-31\"\r\n+      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n+      createdAt: new Date().toISOString(),\r\n+    };\r\n+\r\n+    const epiRef = await db.collection('epis').add(epiData);\r\n+\r\n+    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n+  } catch (error) {\r\n+    console.error('Erro ao criar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n+ */\r\n+const getAllEpis = async (req, res) => {\r\n+  try {\r\n+    const episSnapshot = await db.collection('epis').get();\r\n+    const epis = [];\r\n+    episSnapshot.forEach(doc => {\r\n+      epis.push({ id: doc.id, ...doc.data() });\r\n+    });\r\n+    return res.status(200).json(epis);\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPIs:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca um EPI específico pelo seu ID.\r\n+ */\r\n+const getEpiById = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPI por ID:', error);\r\n+    return res\r\n+      .status(500)\r\n+      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Atualiza um EPI existente no Firestore.\r\n+ */\r\n+const updateEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const data = req.body;\r\n+\r\n+    if (!id) {\r\n+      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n+    }\r\n+\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    await epiRef.update(data);\r\n+\r\n+    return res.status(200).json({ id, ...data });\r\n+  } catch (error) {\r\n+    console.error('Erro ao atualizar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Exclui um EPI do Firestore.\r\n+ */\r\n+const deleteEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+\r\n+    await db.collection('epis').doc(id).delete();\r\n+\r\n+    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n+  } catch (error) {\r\n+    console.error('Erro ao excluir EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n+  }\r\n+};\r\n+\r\n+const teste = async (req, res) => {\r\n+  try {\r\n+    \r\n+  } catch (error) {\r\n+  }\r\n+};\r\n+\r\n+module.exports = {\r\n+  createEpi,\r\n+  getAllEpis,\r\n+  getEpiById,\r\n+  updateEpi,\r\n+  deleteEpi,\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1761589665723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+const { db } = require('../config/firebase');\r\n+\r\n+/**\r\n+ * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n+ */\r\n+const createEpi = async (req, res) => {\r\n+  try {\r\n+    const { nome, ca, validade, quantidade } = req.body;\r\n+\r\n+    // Validação básica dos campos recebidos\r\n+    if (!nome || !ca || !validade || quantidade === undefined) {\r\n+      return res.status(400).json({\r\n+        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n+      });\r\n+    }\r\n+\r\n+    const epiData = {\r\n+      nome,\r\n+      ca,\r\n+      validade, // A data de validade, ex: \"2028-12-31\"\r\n+      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n+      createdAt: new Date().toISOString(),\r\n+    };\r\n+\r\n+    const epiRef = await db.collection('epis').add(epiData);\r\n+\r\n+    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n+  } catch (error) {\r\n+    console.error('Erro ao criar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n+ */\r\n+const getAllEpis = async (req, res) => {\r\n+  try {\r\n+    const episSnapshot = await db.collection('epis').get();\r\n+    const epis = [];\r\n+    episSnapshot.forEach(doc => {\r\n+      epis.push({ id: doc.id, ...doc.data() });\r\n+    });\r\n+    return res.status(200).json(epis);\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPIs:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca um EPI específico pelo seu ID.\r\n+ */\r\n+const getEpiById = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPI por ID:', error);\r\n+    return res\r\n+      .status(500)\r\n+      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Atualiza um EPI existente no Firestore.\r\n+ */\r\n+const updateEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const data = req.body;\r\n+\r\n+    if (!id) {\r\n+      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n+    }\r\n+\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    await epiRef.update(data);\r\n+\r\n+    return res.status(200).json({ id, ...data });\r\n+  } catch (error) {\r\n+    console.error('Erro ao atualizar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Exclui um EPI do Firestore.\r\n+ */\r\n+const deleteEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+\r\n+    await db.collection('epis').doc(id).delete();\r\n+\r\n+    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n+  } catch (error) {\r\n+    console.error('Erro ao excluir EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n+  }\r\n+};\r\n+\r\n+const teste = async (req, res) => {\r\n+  try {\r\n+    c\r\n+  } \r\n+  catch (error) {\r\n+  }\r\n+};\r\n+\r\n+module.exports = {\r\n+  createEpi,\r\n+  getAllEpis,\r\n+  getEpiById,\r\n+  updateEpi,\r\n+  deleteEpi,\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1761589671262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+const { db } = require('../config/firebase');\r\n+\r\n+/**\r\n+ * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n+ */\r\n+const createEpi = async (req, res) => {\r\n+  try {\r\n+    const { nome, ca, validade, quantidade } = req.body;\r\n+\r\n+    // Validação básica dos campos recebidos\r\n+    if (!nome || !ca || !validade || quantidade === undefined) {\r\n+      return res.status(400).json({\r\n+        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n+      });\r\n+    }\r\n+\r\n+    const epiData = {\r\n+      nome,\r\n+      ca,\r\n+      validade, // A data de validade, ex: \"2028-12-31\"\r\n+      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n+      createdAt: new Date().toISOString(),\r\n+    };\r\n+\r\n+    const epiRef = await db.collection('epis').add(epiData);\r\n+\r\n+    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n+  } catch (error) {\r\n+    console.error('Erro ao criar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n+ */\r\n+const getAllEpis = async (req, res) => {\r\n+  try {\r\n+    const episSnapshot = await db.collection('epis').get();\r\n+    const epis = [];\r\n+    episSnapshot.forEach(doc => {\r\n+      epis.push({ id: doc.id, ...doc.data() });\r\n+    });\r\n+    return res.status(200).json(epis);\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPIs:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca um EPI específico pelo seu ID.\r\n+ */\r\n+const getEpiById = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPI por ID:', error);\r\n+    return res\r\n+      .status(500)\r\n+      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Atualiza um EPI existente no Firestore.\r\n+ */\r\n+const updateEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const data = req.body;\r\n+\r\n+    if (!id) {\r\n+      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n+    }\r\n+\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    await epiRef.update(data);\r\n+\r\n+    return res.status(200).json({ id, ...data });\r\n+  } catch (error) {\r\n+    console.error('Erro ao atualizar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Exclui um EPI do Firestore.\r\n+ */\r\n+const deleteEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+\r\n+    await db.collection('epis').doc(id).delete();\r\n+\r\n+    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n+  } catch (error) {\r\n+    console.error('Erro ao excluir EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n+  }\r\n+};\r\n+\r\n+const teste = async (req, res) => {\r\n+  try {\r\n+    console.log\r\n+  } \r\n+  catch (error) {\r\n+  }\r\n+};\r\n+\r\n+module.exports = {\r\n+  createEpi,\r\n+  getAllEpis,\r\n+  getEpiById,\r\n+  updateEpi,\r\n+  deleteEpi,\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1761589677675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+const { db } = require('../config/firebase');\r\n+\r\n+/**\r\n+ * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n+ */\r\n+const createEpi = async (req, res) => {\r\n+  try {\r\n+    const { nome, ca, validade, quantidade } = req.body;\r\n+\r\n+    // Validação básica dos campos recebidos\r\n+    if (!nome || !ca || !validade || quantidade === undefined) {\r\n+      return res.status(400).json({\r\n+        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n+      });\r\n+    }\r\n+\r\n+    const epiData = {\r\n+      nome,\r\n+      ca,\r\n+      validade, // A data de validade, ex: \"2028-12-31\"\r\n+      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n+      createdAt: new Date().toISOString(),\r\n+    };\r\n+\r\n+    const epiRef = await db.collection('epis').add(epiData);\r\n+\r\n+    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n+  } catch (error) {\r\n+    console.error('Erro ao criar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n+ */\r\n+const getAllEpis = async (req, res) => {\r\n+  try {\r\n+    const episSnapshot = await db.collection('epis').get();\r\n+    const epis = [];\r\n+    episSnapshot.forEach(doc => {\r\n+      epis.push({ id: doc.id, ...doc.data() });\r\n+    });\r\n+    return res.status(200).json(epis);\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPIs:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca um EPI específico pelo seu ID.\r\n+ */\r\n+const getEpiById = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPI por ID:', error);\r\n+    return res\r\n+      .status(500)\r\n+      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Atualiza um EPI existente no Firestore.\r\n+ */\r\n+const updateEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const data = req.body;\r\n+\r\n+    if (!id) {\r\n+      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n+    }\r\n+\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    await epiRef.update(data);\r\n+\r\n+    return res.status(200).json({ id, ...data });\r\n+  } catch (error) {\r\n+    console.error('Erro ao atualizar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Exclui um EPI do Firestore.\r\n+ */\r\n+const deleteEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+\r\n+    await db.collection('epis').doc(id).delete();\r\n+\r\n+    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n+  } catch (error) {\r\n+    console.error('Erro ao excluir EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n+  }\r\n+};\r\n+\r\n+const teste = async (req, res) => {\r\n+  try {\r\n+    console.log('deu certo o teste')\r\n+  } \r\n+  catch (error) {\r\n+  }\r\n+};\r\n+\r\n+module.exports = {\r\n+  createEpi,\r\n+  getAllEpis,\r\n+  getEpiById,\r\n+  updateEpi,\r\n+  deleteEpi,\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1761589684154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,132 @@\n+const { db } = require('../config/firebase');\r\n+\r\n+/**\r\n+ * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n+ */\r\n+const createEpi = async (req, res) => {\r\n+  try {\r\n+    const { nome, ca, validade, quantidade } = req.body;\r\n+\r\n+    // Validação básica dos campos recebidos\r\n+    if (!nome || !ca || !validade || quantidade === undefined) {\r\n+      return res.status(400).json({\r\n+        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n+      });\r\n+    }\r\n+\r\n+    const epiData = {\r\n+      nome,\r\n+      ca,\r\n+      validade, // A data de validade, ex: \"2028-12-31\"\r\n+      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n+      createdAt: new Date().toISOString(),\r\n+    };\r\n+\r\n+    const epiRef = await db.collection('epis').add(epiData);\r\n+\r\n+    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n+  } catch (error) {\r\n+    console.error('Erro ao criar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n+ */\r\n+const getAllEpis = async (req, res) => {\r\n+  try {\r\n+    const episSnapshot = await db.collection('epis').get();\r\n+    const epis = [];\r\n+    episSnapshot.forEach(doc => {\r\n+      epis.push({ id: doc.id, ...doc.data() });\r\n+    });\r\n+    return res.status(200).json(epis);\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPIs:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca um EPI específico pelo seu ID.\r\n+ */\r\n+const getEpiById = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPI por ID:', error);\r\n+    return res\r\n+      .status(500)\r\n+      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Atualiza um EPI existente no Firestore.\r\n+ */\r\n+const updateEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const data = req.body;\r\n+\r\n+    if (!id) {\r\n+      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n+    }\r\n+\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    await epiRef.update(data);\r\n+\r\n+    return res.status(200).json({ id, ...data });\r\n+  } catch (error) {\r\n+    console.error('Erro ao atualizar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Exclui um EPI do Firestore.\r\n+ */\r\n+const deleteEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+\r\n+    await db.collection('epis').doc(id).delete();\r\n+\r\n+    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n+  } catch (error) {\r\n+    console.error('Erro ao excluir EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n+  }\r\n+};\r\n+\r\n+const teste = async (req, res) => {\r\n+  try {\r\n+    console.log('deu certo o teste')\r\n+  } \r\n+  catch (error) {\r\n+    console.error('Erro ao excluir EPI:', error);\r\n+  }\r\n+};\r\n+\r\n+module.exports = {\r\n+  createEpi,\r\n+  getAllEpis,\r\n+  getEpiById,\r\n+  updateEpi,\r\n+  deleteEpi,\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1761589692359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,132 @@\n+const { db } = require('../config/firebase');\r\n+\r\n+/**\r\n+ * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n+ */\r\n+const createEpi = async (req, res) => {\r\n+  try {\r\n+    const { nome, ca, validade, quantidade } = req.body;\r\n+\r\n+    // Validação básica dos campos recebidos\r\n+    if (!nome || !ca || !validade || quantidade === undefined) {\r\n+      return res.status(400).json({\r\n+        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n+      });\r\n+    }\r\n+\r\n+    const epiData = {\r\n+      nome,\r\n+      ca,\r\n+      validade, // A data de validade, ex: \"2028-12-31\"\r\n+      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n+      createdAt: new Date().toISOString(),\r\n+    };\r\n+\r\n+    const epiRef = await db.collection('epis').add(epiData);\r\n+\r\n+    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n+  } catch (error) {\r\n+    console.error('Erro ao criar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n+ */\r\n+const getAllEpis = async (req, res) => {\r\n+  try {\r\n+    const episSnapshot = await db.collection('epis').get();\r\n+    const epis = [];\r\n+    episSnapshot.forEach(doc => {\r\n+      epis.push({ id: doc.id, ...doc.data() });\r\n+    });\r\n+    return res.status(200).json(epis);\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPIs:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca um EPI específico pelo seu ID.\r\n+ */\r\n+const getEpiById = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPI por ID:', error);\r\n+    return res\r\n+      .status(500)\r\n+      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Atualiza um EPI existente no Firestore.\r\n+ */\r\n+const updateEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const data = req.body;\r\n+\r\n+    if (!id) {\r\n+      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n+    }\r\n+\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    await epiRef.update(data);\r\n+\r\n+    return res.status(200).json({ id, ...data });\r\n+  } catch (error) {\r\n+    console.error('Erro ao atualizar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Exclui um EPI do Firestore.\r\n+ */\r\n+const deleteEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+\r\n+    await db.collection('epis').doc(id).delete();\r\n+\r\n+    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n+  } catch (error) {\r\n+    console.error('Erro ao excluir EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n+  }\r\n+};\r\n+\r\n+const teste = async (req, res) => {\r\n+  try {\r\n+    console.log('deu certo o teste')\r\n+  } \r\n+  catch (error) {\r\n+    console.error('Erro :', error);\r\n+  }\r\n+};\r\n+\r\n+module.exports = {\r\n+  createEpi,\r\n+  getAllEpis,\r\n+  getEpiById,\r\n+  updateEpi,\r\n+  deleteEpi,\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1761589728271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,8 @@\n  */\r\n const deleteEpi = async (req, res) => {\r\n   try {\r\n     const { id } = req.params;\r\n-\r\n     await db.collection('epis').doc(id).delete();\r\n \r\n     return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n   } catch (error) {\r\n"
                },
                {
                    "date": 1761589791217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,133 @@\n+const { db } = require('../config/firebase');\r\n+\r\n+/**\r\n+ * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n+ */\r\n+const createEpi = async (req, res) => {\r\n+  try {\r\n+    const { nome, ca, validade, quantidade } = req.body;\r\n+\r\n+    // Validação básica dos campos recebidos\r\n+    if (!nome || !ca || !validade || quantidade === undefined) {\r\n+      return res.status(400).json({\r\n+        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n+      });\r\n+    }\r\n+\r\n+    const epiData = {\r\n+      nome,\r\n+      ca,\r\n+      validade, // A data de validade, ex: \"2028-12-31\"\r\n+      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n+      createdAt: new Date().toISOString(),\r\n+    };\r\n+\r\n+    const epiRef = await db.collection('epis').add(epiData);\r\n+\r\n+    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n+  } catch (error) {\r\n+    console.error('Erro ao criar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n+ */\r\n+const getAllEpis = async (req, res) => {\r\n+  try {\r\n+    const episSnapshot = await db.collection('epis').get();\r\n+    const epis = [];\r\n+    episSnapshot.forEach(doc => {\r\n+      epis.push({ id: doc.id, ...doc.data() });\r\n+    });\r\n+    return res.status(200).json(epis);\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPIs:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca um EPI específico pelo seu ID.\r\n+ */\r\n+const getEpiById = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPI por ID:', error);\r\n+    return res\r\n+      .status(500)\r\n+      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Atualiza um EPI existente no Firestore.\r\n+ */\r\n+const updateEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const data = req.body;\r\n+\r\n+    if (!id) {\r\n+      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n+    }\r\n+\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    await epiRef.update(data);\r\n+\r\n+    return res.status(200).json({ id, ...data });\r\n+  } catch (error) {\r\n+    console.error('Erro ao atualizar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Exclui um EPI do Firestore.\r\n+ */\r\n+const deleteEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    await db.collection('epis').doc(id).delete();\r\n+    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n+  } catch (error) {\r\n+    console.error('Erro ao excluir EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Exclui um EPI do Firestore.\r\n+ */\r\n+const teste = async (req, res) => {\r\n+  try {\r\n+    console.log('deu certo o teste')\r\n+  } \r\n+  catch (error) {\r\n+    console.error('Erro ao teste:', error);\r\n+  }\r\n+};\r\n+\r\n+module.exports = {\r\n+  createEpi,\r\n+  getAllEpis,\r\n+  getEpiById,\r\n+  updateEpi,\r\n+  deleteEpi,\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1761589800201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,133 @@\n+const { db } = require('../config/firebase');\r\n+\r\n+/**\r\n+ * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n+ */\r\n+const createEpi = async (req, res) => {\r\n+  try {\r\n+    const { nome, ca, validade, quantidade } = req.body;\r\n+\r\n+    // Validação básica dos campos recebidos\r\n+    if (!nome || !ca || !validade || quantidade === undefined) {\r\n+      return res.status(400).json({\r\n+        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n+      });\r\n+    }\r\n+\r\n+    const epiData = {\r\n+      nome,\r\n+      ca,\r\n+      validade, // A data de validade, ex: \"2028-12-31\"\r\n+      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n+      createdAt: new Date().toISOString(),\r\n+    };\r\n+\r\n+    const epiRef = await db.collection('epis').add(epiData);\r\n+\r\n+    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n+  } catch (error) {\r\n+    console.error('Erro ao criar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n+ */\r\n+const getAllEpis = async (req, res) => {\r\n+  try {\r\n+    const episSnapshot = await db.collection('epis').get();\r\n+    const epis = [];\r\n+    episSnapshot.forEach(doc => {\r\n+      epis.push({ id: doc.id, ...doc.data() });\r\n+    });\r\n+    return res.status(200).json(epis);\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPIs:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca um EPI específico pelo seu ID.\r\n+ */\r\n+const getEpiById = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPI por ID:', error);\r\n+    return res\r\n+      .status(500)\r\n+      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Atualiza um EPI existente no Firestore.\r\n+ */\r\n+const updateEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const data = req.body;\r\n+\r\n+    if (!id) {\r\n+      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n+    }\r\n+\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    await epiRef.update(data);\r\n+\r\n+    return res.status(200).json({ id, ...data });\r\n+  } catch (error) {\r\n+    console.error('Erro ao atualizar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Exclui um EPI do Firestore.\r\n+ */\r\n+const deleteEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    await db.collection('epis').doc(id).delete();\r\n+    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n+  } catch (error) {\r\n+    console.error('Erro ao excluir EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Rota de teste.\r\n+ */\r\n+const teste = async (req, res) => {\r\n+  try {\r\n+    console.log('deu certo o teste')\r\n+  } \r\n+  catch (error) {\r\n+    console.error('Erro ao teste:', error);\r\n+  }\r\n+};\r\n+\r\n+module.exports = {\r\n+  createEpi,\r\n+  getAllEpis,\r\n+  getEpiById,\r\n+  updateEpi,\r\n+  deleteEpi,\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1761589817960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,1188 +120,15 @@\n     console.log('deu certo o teste')\r\n   } \r\n   catch (error) {\r\n     console.error('Erro ao teste:', error);\r\n-  }\r\n-};\r\n-\r\n-module.exports = {\r\n-  createEpi,\r\n-  getAllEpis,\r\n-  getEpiById,\r\n-  updateEpi,\r\n-  deleteEpi,\r\n-};\n-const { db } = require('../config/firebase');\r\n-\r\n-/**\r\n- * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n- */\r\n-const createEpi = async (req, res) => {\r\n-  try {\r\n-    const { nome, ca, validade, quantidade } = req.body;\r\n-\r\n-    // Validação básica dos campos recebidos\r\n-    if (!nome || !ca || !validade || quantidade === undefined) {\r\n-      return res.status(400).json({\r\n-        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n-      });\r\n-    }\r\n-\r\n-    const epiData = {\r\n-      nome,\r\n-      ca,\r\n-      validade, // A data de validade, ex: \"2028-12-31\"\r\n-      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n-      createdAt: new Date().toISOString(),\r\n-    };\r\n-\r\n-    const epiRef = await db.collection('epis').add(epiData);\r\n-\r\n-    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n-  } catch (error) {\r\n-    console.error('Erro ao criar EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n- */\r\n-const getAllEpis = async (req, res) => {\r\n-  try {\r\n-    const episSnapshot = await db.collection('epis').get();\r\n-    const epis = [];\r\n-    episSnapshot.forEach(doc => {\r\n-      epis.push({ id: doc.id, ...doc.data() });\r\n-    });\r\n-    return res.status(200).json(epis);\r\n-  } catch (error) {\r\n-    console.error('Erro ao buscar EPIs:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Busca um EPI específico pelo seu ID.\r\n- */\r\n-const getEpiById = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const epiRef = db.collection('epis').doc(id);\r\n-    const doc = await epiRef.get();\r\n-\r\n-    if (!doc.exists) {\r\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n-    }\r\n-\r\n-    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n-  } catch (error) {\r\n-    console.error('Erro ao buscar EPI por ID:', error);\r\n-    return res\r\n-      .status(500)\r\n-      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Atualiza um EPI existente no Firestore.\r\n- */\r\n-const updateEpi = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const data = req.body;\r\n-\r\n-    if (!id) {\r\n-      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n-    }\r\n-\r\n-    const epiRef = db.collection('epis').doc(id);\r\n-    const doc = await epiRef.get();\r\n-\r\n-    if (!doc.exists) {\r\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n-    }\r\n-\r\n-    await epiRef.update(data);\r\n-\r\n-    return res.status(200).json({ id, ...data });\r\n-  } catch (error) {\r\n-    console.error('Erro ao atualizar EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Exclui um EPI do Firestore.\r\n- */\r\n-const deleteEpi = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    await db.collection('epis').doc(id).delete();\r\n-    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n-  } catch (error) {\r\n-    console.error('Erro ao excluir EPI:', error);\r\n     return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n   }\r\n };\r\n \r\n-/**\r\n- * Exclui um EPI do Firestore.\r\n- */\r\n-const teste = async (req, res) => {\r\n-  try {\r\n-    console.log('deu certo o teste')\r\n-  } \r\n-  catch (error) {\r\n-    console.error('Erro ao teste:', error);\r\n-  }\r\n-};\r\n-\r\n module.exports = {\r\n   createEpi,\r\n   getAllEpis,\r\n   getEpiById,\r\n   updateEpi,\r\n   deleteEpi,\r\n-};\n-const { db } = require('../config/firebase');\r\n-\r\n-/**\r\n- * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n- */\r\n-const createEpi = async (req, res) => {\r\n-  try {\r\n-    const { nome, ca, validade, quantidade } = req.body;\r\n-\r\n-    // Validação básica dos campos recebidos\r\n-    if (!nome || !ca || !validade || quantidade === undefined) {\r\n-      return res.status(400).json({\r\n-        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n-      });\r\n-    }\r\n-\r\n-    const epiData = {\r\n-      nome,\r\n-      ca,\r\n-      validade, // A data de validade, ex: \"2028-12-31\"\r\n-      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n-      createdAt: new Date().toISOString(),\r\n-    };\r\n-\r\n-    const epiRef = await db.collection('epis').add(epiData);\r\n-\r\n-    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n-  } catch (error) {\r\n-    console.error('Erro ao criar EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n- */\r\n-const getAllEpis = async (req, res) => {\r\n-  try {\r\n-    const episSnapshot = await db.collection('epis').get();\r\n-    const epis = [];\r\n-    episSnapshot.forEach(doc => {\r\n-      epis.push({ id: doc.id, ...doc.data() });\r\n-    });\r\n-    return res.status(200).json(epis);\r\n-  } catch (error) {\r\n-    console.error('Erro ao buscar EPIs:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Busca um EPI específico pelo seu ID.\r\n- */\r\n-const getEpiById = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const epiRef = db.collection('epis').doc(id);\r\n-    const doc = await epiRef.get();\r\n-\r\n-    if (!doc.exists) {\r\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n-    }\r\n-\r\n-    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n-  } catch (error) {\r\n-    console.error('Erro ao buscar EPI por ID:', error);\r\n-    return res\r\n-      .status(500)\r\n-      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Atualiza um EPI existente no Firestore.\r\n- */\r\n-const updateEpi = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const data = req.body;\r\n-\r\n-    if (!id) {\r\n-      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n-    }\r\n-\r\n-    const epiRef = db.collection('epis').doc(id);\r\n-    const doc = await epiRef.get();\r\n-\r\n-    if (!doc.exists) {\r\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n-    }\r\n-\r\n-    await epiRef.update(data);\r\n-\r\n-    return res.status(200).json({ id, ...data });\r\n-  } catch (error) {\r\n-    console.error('Erro ao atualizar EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Exclui um EPI do Firestore.\r\n- */\r\n-const deleteEpi = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    await db.collection('epis').doc(id).delete();\r\n-\r\n-    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n-  } catch (error) {\r\n-    console.error('Erro ao excluir EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n-  }\r\n-};\r\n-\r\n-const teste = async (req, res) => {\r\n-  try {\r\n-    console.log('deu certo o teste')\r\n-  } \r\n-  catch (error) {\r\n-    console.error('Erro :', error);\r\n-  }\r\n-};\r\n-\r\n-module.exports = {\r\n-  createEpi,\r\n-  getAllEpis,\r\n-  getEpiById,\r\n-  updateEpi,\r\n-  deleteEpi,\r\n-};\n-const { db } = require('../config/firebase');\r\n-\r\n-/**\r\n- * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n- */\r\n-const createEpi = async (req, res) => {\r\n-  try {\r\n-    const { nome, ca, validade, quantidade } = req.body;\r\n-\r\n-    // Validação básica dos campos recebidos\r\n-    if (!nome || !ca || !validade || quantidade === undefined) {\r\n-      return res.status(400).json({\r\n-        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n-      });\r\n-    }\r\n-\r\n-    const epiData = {\r\n-      nome,\r\n-      ca,\r\n-      validade, // A data de validade, ex: \"2028-12-31\"\r\n-      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n-      createdAt: new Date().toISOString(),\r\n-    };\r\n-\r\n-    const epiRef = await db.collection('epis').add(epiData);\r\n-\r\n-    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n-  } catch (error) {\r\n-    console.error('Erro ao criar EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n- */\r\n-const getAllEpis = async (req, res) => {\r\n-  try {\r\n-    const episSnapshot = await db.collection('epis').get();\r\n-    const epis = [];\r\n-    episSnapshot.forEach(doc => {\r\n-      epis.push({ id: doc.id, ...doc.data() });\r\n-    });\r\n-    return res.status(200).json(epis);\r\n-  } catch (error) {\r\n-    console.error('Erro ao buscar EPIs:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Busca um EPI específico pelo seu ID.\r\n- */\r\n-const getEpiById = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const epiRef = db.collection('epis').doc(id);\r\n-    const doc = await epiRef.get();\r\n-\r\n-    if (!doc.exists) {\r\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n-    }\r\n-\r\n-    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n-  } catch (error) {\r\n-    console.error('Erro ao buscar EPI por ID:', error);\r\n-    return res\r\n-      .status(500)\r\n-      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Atualiza um EPI existente no Firestore.\r\n- */\r\n-const updateEpi = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const data = req.body;\r\n-\r\n-    if (!id) {\r\n-      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n-    }\r\n-\r\n-    const epiRef = db.collection('epis').doc(id);\r\n-    const doc = await epiRef.get();\r\n-\r\n-    if (!doc.exists) {\r\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n-    }\r\n-\r\n-    await epiRef.update(data);\r\n-\r\n-    return res.status(200).json({ id, ...data });\r\n-  } catch (error) {\r\n-    console.error('Erro ao atualizar EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Exclui um EPI do Firestore.\r\n- */\r\n-const deleteEpi = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-\r\n-    await db.collection('epis').doc(id).delete();\r\n-\r\n-    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n-  } catch (error) {\r\n-    console.error('Erro ao excluir EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n-  }\r\n-};\r\n-\r\n-const teste = async (req, res) => {\r\n-  try {\r\n-    console.log('deu certo o teste')\r\n-  } \r\n-  catch (error) {\r\n-    console.error('Erro ao excluir EPI:', error);\r\n-  }\r\n-};\r\n-\r\n-module.exports = {\r\n-  createEpi,\r\n-  getAllEpis,\r\n-  getEpiById,\r\n-  updateEpi,\r\n-  deleteEpi,\r\n-};\n-const { db } = require('../config/firebase');\r\n-\r\n-/**\r\n- * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n- */\r\n-const createEpi = async (req, res) => {\r\n-  try {\r\n-    const { nome, ca, validade, quantidade } = req.body;\r\n-\r\n-    // Validação básica dos campos recebidos\r\n-    if (!nome || !ca || !validade || quantidade === undefined) {\r\n-      return res.status(400).json({\r\n-        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n-      });\r\n-    }\r\n-\r\n-    const epiData = {\r\n-      nome,\r\n-      ca,\r\n-      validade, // A data de validade, ex: \"2028-12-31\"\r\n-      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n-      createdAt: new Date().toISOString(),\r\n-    };\r\n-\r\n-    const epiRef = await db.collection('epis').add(epiData);\r\n-\r\n-    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n-  } catch (error) {\r\n-    console.error('Erro ao criar EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n- */\r\n-const getAllEpis = async (req, res) => {\r\n-  try {\r\n-    const episSnapshot = await db.collection('epis').get();\r\n-    const epis = [];\r\n-    episSnapshot.forEach(doc => {\r\n-      epis.push({ id: doc.id, ...doc.data() });\r\n-    });\r\n-    return res.status(200).json(epis);\r\n-  } catch (error) {\r\n-    console.error('Erro ao buscar EPIs:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Busca um EPI específico pelo seu ID.\r\n- */\r\n-const getEpiById = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const epiRef = db.collection('epis').doc(id);\r\n-    const doc = await epiRef.get();\r\n-\r\n-    if (!doc.exists) {\r\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n-    }\r\n-\r\n-    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n-  } catch (error) {\r\n-    console.error('Erro ao buscar EPI por ID:', error);\r\n-    return res\r\n-      .status(500)\r\n-      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Atualiza um EPI existente no Firestore.\r\n- */\r\n-const updateEpi = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const data = req.body;\r\n-\r\n-    if (!id) {\r\n-      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n-    }\r\n-\r\n-    const epiRef = db.collection('epis').doc(id);\r\n-    const doc = await epiRef.get();\r\n-\r\n-    if (!doc.exists) {\r\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n-    }\r\n-\r\n-    await epiRef.update(data);\r\n-\r\n-    return res.status(200).json({ id, ...data });\r\n-  } catch (error) {\r\n-    console.error('Erro ao atualizar EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Exclui um EPI do Firestore.\r\n- */\r\n-const deleteEpi = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-\r\n-    await db.collection('epis').doc(id).delete();\r\n-\r\n-    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n-  } catch (error) {\r\n-    console.error('Erro ao excluir EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n-  }\r\n-};\r\n-\r\n-const teste = async (req, res) => {\r\n-  try {\r\n-    console.log('deu certo o teste')\r\n-  } \r\n-  catch (error) {\r\n-  }\r\n-};\r\n-\r\n-module.exports = {\r\n-  createEpi,\r\n-  getAllEpis,\r\n-  getEpiById,\r\n-  updateEpi,\r\n-  deleteEpi,\r\n-};\n-const { db } = require('../config/firebase');\r\n-\r\n-/**\r\n- * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n- */\r\n-const createEpi = async (req, res) => {\r\n-  try {\r\n-    const { nome, ca, validade, quantidade } = req.body;\r\n-\r\n-    // Validação básica dos campos recebidos\r\n-    if (!nome || !ca || !validade || quantidade === undefined) {\r\n-      return res.status(400).json({\r\n-        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n-      });\r\n-    }\r\n-\r\n-    const epiData = {\r\n-      nome,\r\n-      ca,\r\n-      validade, // A data de validade, ex: \"2028-12-31\"\r\n-      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n-      createdAt: new Date().toISOString(),\r\n-    };\r\n-\r\n-    const epiRef = await db.collection('epis').add(epiData);\r\n-\r\n-    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n-  } catch (error) {\r\n-    console.error('Erro ao criar EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n- */\r\n-const getAllEpis = async (req, res) => {\r\n-  try {\r\n-    const episSnapshot = await db.collection('epis').get();\r\n-    const epis = [];\r\n-    episSnapshot.forEach(doc => {\r\n-      epis.push({ id: doc.id, ...doc.data() });\r\n-    });\r\n-    return res.status(200).json(epis);\r\n-  } catch (error) {\r\n-    console.error('Erro ao buscar EPIs:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Busca um EPI específico pelo seu ID.\r\n- */\r\n-const getEpiById = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const epiRef = db.collection('epis').doc(id);\r\n-    const doc = await epiRef.get();\r\n-\r\n-    if (!doc.exists) {\r\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n-    }\r\n-\r\n-    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n-  } catch (error) {\r\n-    console.error('Erro ao buscar EPI por ID:', error);\r\n-    return res\r\n-      .status(500)\r\n-      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Atualiza um EPI existente no Firestore.\r\n- */\r\n-const updateEpi = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const data = req.body;\r\n-\r\n-    if (!id) {\r\n-      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n-    }\r\n-\r\n-    const epiRef = db.collection('epis').doc(id);\r\n-    const doc = await epiRef.get();\r\n-\r\n-    if (!doc.exists) {\r\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n-    }\r\n-\r\n-    await epiRef.update(data);\r\n-\r\n-    return res.status(200).json({ id, ...data });\r\n-  } catch (error) {\r\n-    console.error('Erro ao atualizar EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Exclui um EPI do Firestore.\r\n- */\r\n-const deleteEpi = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-\r\n-    await db.collection('epis').doc(id).delete();\r\n-\r\n-    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n-  } catch (error) {\r\n-    console.error('Erro ao excluir EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n-  }\r\n-};\r\n-\r\n-const teste = async (req, res) => {\r\n-  try {\r\n-    console.log\r\n-  } \r\n-  catch (error) {\r\n-  }\r\n-};\r\n-\r\n-module.exports = {\r\n-  createEpi,\r\n-  getAllEpis,\r\n-  getEpiById,\r\n-  updateEpi,\r\n-  deleteEpi,\r\n-};\n-const { db } = require('../config/firebase');\r\n-\r\n-/**\r\n- * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n- */\r\n-const createEpi = async (req, res) => {\r\n-  try {\r\n-    const { nome, ca, validade, quantidade } = req.body;\r\n-\r\n-    // Validação básica dos campos recebidos\r\n-    if (!nome || !ca || !validade || quantidade === undefined) {\r\n-      return res.status(400).json({\r\n-        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n-      });\r\n-    }\r\n-\r\n-    const epiData = {\r\n-      nome,\r\n-      ca,\r\n-      validade, // A data de validade, ex: \"2028-12-31\"\r\n-      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n-      createdAt: new Date().toISOString(),\r\n-    };\r\n-\r\n-    const epiRef = await db.collection('epis').add(epiData);\r\n-\r\n-    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n-  } catch (error) {\r\n-    console.error('Erro ao criar EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n- */\r\n-const getAllEpis = async (req, res) => {\r\n-  try {\r\n-    const episSnapshot = await db.collection('epis').get();\r\n-    const epis = [];\r\n-    episSnapshot.forEach(doc => {\r\n-      epis.push({ id: doc.id, ...doc.data() });\r\n-    });\r\n-    return res.status(200).json(epis);\r\n-  } catch (error) {\r\n-    console.error('Erro ao buscar EPIs:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Busca um EPI específico pelo seu ID.\r\n- */\r\n-const getEpiById = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const epiRef = db.collection('epis').doc(id);\r\n-    const doc = await epiRef.get();\r\n-\r\n-    if (!doc.exists) {\r\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n-    }\r\n-\r\n-    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n-  } catch (error) {\r\n-    console.error('Erro ao buscar EPI por ID:', error);\r\n-    return res\r\n-      .status(500)\r\n-      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Atualiza um EPI existente no Firestore.\r\n- */\r\n-const updateEpi = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const data = req.body;\r\n-\r\n-    if (!id) {\r\n-      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n-    }\r\n-\r\n-    const epiRef = db.collection('epis').doc(id);\r\n-    const doc = await epiRef.get();\r\n-\r\n-    if (!doc.exists) {\r\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n-    }\r\n-\r\n-    await epiRef.update(data);\r\n-\r\n-    return res.status(200).json({ id, ...data });\r\n-  } catch (error) {\r\n-    console.error('Erro ao atualizar EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Exclui um EPI do Firestore.\r\n- */\r\n-const deleteEpi = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-\r\n-    await db.collection('epis').doc(id).delete();\r\n-\r\n-    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n-  } catch (error) {\r\n-    console.error('Erro ao excluir EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n-  }\r\n-};\r\n-\r\n-const teste = async (req, res) => {\r\n-  try {\r\n-    c\r\n-  } \r\n-  catch (error) {\r\n-  }\r\n-};\r\n-\r\n-module.exports = {\r\n-  createEpi,\r\n-  getAllEpis,\r\n-  getEpiById,\r\n-  updateEpi,\r\n-  deleteEpi,\r\n-};\n-const { db } = require('../config/firebase');\r\n-\r\n-/**\r\n- * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n- */\r\n-const createEpi = async (req, res) => {\r\n-  try {\r\n-    const { nome, ca, validade, quantidade } = req.body;\r\n-\r\n-    // Validação básica dos campos recebidos\r\n-    if (!nome || !ca || !validade || quantidade === undefined) {\r\n-      return res.status(400).json({\r\n-        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n-      });\r\n-    }\r\n-\r\n-    const epiData = {\r\n-      nome,\r\n-      ca,\r\n-      validade, // A data de validade, ex: \"2028-12-31\"\r\n-      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n-      createdAt: new Date().toISOString(),\r\n-    };\r\n-\r\n-    const epiRef = await db.collection('epis').add(epiData);\r\n-\r\n-    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n-  } catch (error) {\r\n-    console.error('Erro ao criar EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n- */\r\n-const getAllEpis = async (req, res) => {\r\n-  try {\r\n-    const episSnapshot = await db.collection('epis').get();\r\n-    const epis = [];\r\n-    episSnapshot.forEach(doc => {\r\n-      epis.push({ id: doc.id, ...doc.data() });\r\n-    });\r\n-    return res.status(200).json(epis);\r\n-  } catch (error) {\r\n-    console.error('Erro ao buscar EPIs:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Busca um EPI específico pelo seu ID.\r\n- */\r\n-const getEpiById = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const epiRef = db.collection('epis').doc(id);\r\n-    const doc = await epiRef.get();\r\n-\r\n-    if (!doc.exists) {\r\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n-    }\r\n-\r\n-    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n-  } catch (error) {\r\n-    console.error('Erro ao buscar EPI por ID:', error);\r\n-    return res\r\n-      .status(500)\r\n-      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Atualiza um EPI existente no Firestore.\r\n- */\r\n-const updateEpi = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const data = req.body;\r\n-\r\n-    if (!id) {\r\n-      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n-    }\r\n-\r\n-    const epiRef = db.collection('epis').doc(id);\r\n-    const doc = await epiRef.get();\r\n-\r\n-    if (!doc.exists) {\r\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n-    }\r\n-\r\n-    await epiRef.update(data);\r\n-\r\n-    return res.status(200).json({ id, ...data });\r\n-  } catch (error) {\r\n-    console.error('Erro ao atualizar EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Exclui um EPI do Firestore.\r\n- */\r\n-const deleteEpi = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-\r\n-    await db.collection('epis').doc(id).delete();\r\n-\r\n-    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n-  } catch (error) {\r\n-    console.error('Erro ao excluir EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n-  }\r\n-};\r\n-\r\n-const teste = async (req, res) => {\r\n-  try {\r\n-    \r\n-  } catch (error) {\r\n-  }\r\n-};\r\n-\r\n-module.exports = {\r\n-  createEpi,\r\n-  getAllEpis,\r\n-  getEpiById,\r\n-  updateEpi,\r\n-  deleteEpi,\r\n-};\n-const { db } = require('../config/firebase');\r\n-\r\n-/**\r\n- * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n- */\r\n-const createEpi = async (req, res) => {\r\n-  try {\r\n-    const { nome, ca, validade, quantidade } = req.body;\r\n-\r\n-    // Validação básica dos campos recebidos\r\n-    if (!nome || !ca || !validade || quantidade === undefined) {\r\n-      return res.status(400).json({\r\n-        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n-      });\r\n-    }\r\n-\r\n-    const epiData = {\r\n-      nome,\r\n-      ca,\r\n-      validade, // A data de validade, ex: \"2028-12-31\"\r\n-      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n-      createdAt: new Date().toISOString(),\r\n-    };\r\n-\r\n-    const epiRef = await db.collection('epis').add(epiData);\r\n-\r\n-    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n-  } catch (error) {\r\n-    console.error('Erro ao criar EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n- */\r\n-const getAllEpis = async (req, res) => {\r\n-  try {\r\n-    const episSnapshot = await db.collection('epis').get();\r\n-    const epis = [];\r\n-    episSnapshot.forEach(doc => {\r\n-      epis.push({ id: doc.id, ...doc.data() });\r\n-    });\r\n-    return res.status(200).json(epis);\r\n-  } catch (error) {\r\n-    console.error('Erro ao buscar EPIs:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Busca um EPI específico pelo seu ID.\r\n- */\r\n-const getEpiById = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const epiRef = db.collection('epis').doc(id);\r\n-    const doc = await epiRef.get();\r\n-\r\n-    if (!doc.exists) {\r\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n-    }\r\n-\r\n-    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n-  } catch (error) {\r\n-    console.error('Erro ao buscar EPI por ID:', error);\r\n-    return res\r\n-      .status(500)\r\n-      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Atualiza um EPI existente no Firestore.\r\n- */\r\n-const updateEpi = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const data = req.body;\r\n-\r\n-    if (!id) {\r\n-      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n-    }\r\n-\r\n-    const epiRef = db.collection('epis').doc(id);\r\n-    const doc = await epiRef.get();\r\n-\r\n-    if (!doc.exists) {\r\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n-    }\r\n-\r\n-    await epiRef.update(data);\r\n-\r\n-    return res.status(200).json({ id, ...data });\r\n-  } catch (error) {\r\n-    console.error('Erro ao atualizar EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Exclui um EPI do Firestore.\r\n- */\r\n-const deleteEpi = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-\r\n-    await db.collection('epis').doc(id).delete();\r\n-\r\n-    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n-  } catch (error) {\r\n-    console.error('Erro ao excluir EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n-  }\r\n-};\r\n-\r\n-const teste = async (req, res) => {\r\n-  try {} catch (error) {\r\n-\r\n-};\r\n-\r\n-module.exports = {\r\n-  createEpi,\r\n-  getAllEpis,\r\n-  getEpiById,\r\n-  updateEpi,\r\n-  deleteEpi,\r\n-};\n-const { db } = require('../config/firebase');\r\n-\r\n-/**\r\n- * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n- */\r\n-const createEpi = async (req, res) => {\r\n-  try {\r\n-    const { nome, ca, validade, quantidade } = req.body;\r\n-\r\n-    // Validação básica dos campos recebidos\r\n-    if (!nome || !ca || !validade || quantidade === undefined) {\r\n-      return res.status(400).json({\r\n-        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n-      });\r\n-    }\r\n-\r\n-    const epiData = {\r\n-      nome,\r\n-      ca,\r\n-      validade, // A data de validade, ex: \"2028-12-31\"\r\n-      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n-      createdAt: new Date().toISOString(),\r\n-    };\r\n-\r\n-    const epiRef = await db.collection('epis').add(epiData);\r\n-\r\n-    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n-  } catch (error) {\r\n-    console.error('Erro ao criar EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n- */\r\n-const getAllEpis = async (req, res) => {\r\n-  try {\r\n-    const episSnapshot = await db.collection('epis').get();\r\n-    const epis = [];\r\n-    episSnapshot.forEach(doc => {\r\n-      epis.push({ id: doc.id, ...doc.data() });\r\n-    });\r\n-    return res.status(200).json(epis);\r\n-  } catch (error) {\r\n-    console.error('Erro ao buscar EPIs:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Busca um EPI específico pelo seu ID.\r\n- */\r\n-const getEpiById = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const epiRef = db.collection('epis').doc(id);\r\n-    const doc = await epiRef.get();\r\n-\r\n-    if (!doc.exists) {\r\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n-    }\r\n-\r\n-    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n-  } catch (error) {\r\n-    console.error('Erro ao buscar EPI por ID:', error);\r\n-    return res\r\n-      .status(500)\r\n-      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Atualiza um EPI existente no Firestore.\r\n- */\r\n-const updateEpi = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const data = req.body;\r\n-\r\n-    if (!id) {\r\n-      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n-    }\r\n-\r\n-    const epiRef = db.collection('epis').doc(id);\r\n-    const doc = await epiRef.get();\r\n-\r\n-    if (!doc.exists) {\r\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n-    }\r\n-\r\n-    await epiRef.update(data);\r\n-\r\n-    return res.status(200).json({ id, ...data });\r\n-  } catch (error) {\r\n-    console.error('Erro ao atualizar EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Exclui um EPI do Firestore.\r\n- */\r\n-const deleteEpi = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-\r\n-    await db.collection('epis').doc(id).delete();\r\n-\r\n-    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n-  } catch (error) {\r\n-    console.error('Erro ao excluir EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n-  }\r\n-};\r\n-\r\n-const teste = async (req, res) => {\r\n-  \r\n-};\r\n-\r\n-module.exports = {\r\n-  createEpi,\r\n-  getAllEpis,\r\n-  getEpiById,\r\n-  updateEpi,\r\n-  deleteEpi,\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1761589825722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,134 @@\n+const { db } = require('../config/firebase');\r\n+\r\n+/**\r\n+ * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n+ */\r\n+const createEpi = async (req, res) => {\r\n+  try {\r\n+    const { nome, ca, validade, quantidade } = req.body;\r\n+\r\n+    // Validação básica dos campos recebidos\r\n+    if (!nome || !ca || !validade || quantidade === undefined) {\r\n+      return res.status(400).json({\r\n+        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n+      });\r\n+    }\r\n+\r\n+    const epiData = {\r\n+      nome,\r\n+      ca,\r\n+      validade, // A data de validade, ex: \"2028-12-31\"\r\n+      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n+      createdAt: new Date().toISOString(),\r\n+    };\r\n+\r\n+    const epiRef = await db.collection('epis').add(epiData);\r\n+\r\n+    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n+  } catch (error) {\r\n+    console.error('Erro ao criar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n+ */\r\n+const getAllEpis = async (req, res) => {\r\n+  try {\r\n+    const episSnapshot = await db.collection('epis').get();\r\n+    const epis = [];\r\n+    episSnapshot.forEach(doc => {\r\n+      epis.push({ id: doc.id, ...doc.data() });\r\n+    });\r\n+    return res.status(200).json(epis);\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPIs:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca um EPI específico pelo seu ID.\r\n+ */\r\n+const getEpiById = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPI por ID:', error);\r\n+    return res\r\n+      .status(500)\r\n+      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Atualiza um EPI existente no Firestore.\r\n+ */\r\n+const updateEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const data = req.body;\r\n+\r\n+    if (!id) {\r\n+      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n+    }\r\n+\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    await epiRef.update(data);\r\n+\r\n+    return res.status(200).json({ id, ...data });\r\n+  } catch (error) {\r\n+    console.error('Erro ao atualizar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Exclui um EPI do Firestore.\r\n+ */\r\n+const deleteEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    await db.collection('epis').doc(id).delete();\r\n+    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n+  } catch (error) {\r\n+    console.error('Erro ao excluir EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Rota de teste.\r\n+ */\r\n+const teste = async (req, res) => {\r\n+  try {\r\n+    console.log('deu certo o teste')\r\n+  } \r\n+  catch (error) {\r\n+    console.error('Erro ao teste:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor.' });\r\n+  }\r\n+};\r\n+\r\n+module.exports = {\r\n+  createEpi,\r\n+  getAllEpis,\r\n+  getEpiById,\r\n+  updateEpi,\r\n+  deleteEpi,\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1761589861451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,135 @@\n+const { db } = require('../config/firebase');\r\n+\r\n+/**\r\n+ * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n+ */\r\n+const createEpi = async (req, res) => {\r\n+  try {\r\n+    const { nome, ca, validade, quantidade } = req.body;\r\n+\r\n+    // Validação básica dos campos recebidos\r\n+    if (!nome || !ca || !validade || quantidade === undefined) {\r\n+      return res.status(400).json({\r\n+        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n+      });\r\n+    }\r\n+\r\n+    const epiData = {\r\n+      nome,\r\n+      ca,\r\n+      validade, // A data de validade, ex: \"2028-12-31\"\r\n+      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n+      createdAt: new Date().toISOString(),\r\n+    };\r\n+\r\n+    const epiRef = await db.collection('epis').add(epiData);\r\n+\r\n+    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n+  } catch (error) {\r\n+    console.error('Erro ao criar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n+ */\r\n+const getAllEpis = async (req, res) => {\r\n+  try {\r\n+    const episSnapshot = await db.collection('epis').get();\r\n+    const epis = [];\r\n+    episSnapshot.forEach(doc => {\r\n+      epis.push({ id: doc.id, ...doc.data() });\r\n+    });\r\n+    return res.status(200).json(epis);\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPIs:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca um EPI específico pelo seu ID.\r\n+ */\r\n+const getEpiById = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPI por ID:', error);\r\n+    return res\r\n+      .status(500)\r\n+      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Atualiza um EPI existente no Firestore.\r\n+ */\r\n+const updateEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const data = req.body;\r\n+\r\n+    if (!id) {\r\n+      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n+    }\r\n+\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    await epiRef.update(data);\r\n+\r\n+    return res.status(200).json({ id, ...data });\r\n+  } catch (error) {\r\n+    console.error('Erro ao atualizar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Exclui um EPI do Firestore.\r\n+ */\r\n+const deleteEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    await db.collection('epis').doc(id).delete();\r\n+    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n+  } catch (error) {\r\n+    console.error('Erro ao excluir EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Rota de teste.\r\n+ */\r\n+const teste = async (req, res) => {\r\n+  try {\r\n+    console.log('deu certo o teste')\r\n+  } \r\n+  catch (error) {\r\n+    console.error('Erro ao teste:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor.' });\r\n+  }\r\n+};\r\n+\r\n+module.exports = {\r\n+  createEpi,\r\n+  getAllEpis,\r\n+  getEpiById,\r\n+  updateEpi,\r\n+  deleteEpi,\r\n+  teste\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1761594259932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,8 +116,9 @@\n  * Rota de teste.\r\n  */\r\n const teste = async (req, res) => {\r\n   try {\r\n+    \r\n     console.log('deu certo o teste')\r\n   } \r\n   catch (error) {\r\n     console.error('Erro ao teste:', error);\r\n@@ -131,273 +132,5 @@\n   getEpiById,\r\n   updateEpi,\r\n   deleteEpi,\r\n   teste\r\n-};\n-const { db } = require('../config/firebase');\r\n-\r\n-/**\r\n- * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n- */\r\n-const createEpi = async (req, res) => {\r\n-  try {\r\n-    const { nome, ca, validade, quantidade } = req.body;\r\n-\r\n-    // Validação básica dos campos recebidos\r\n-    if (!nome || !ca || !validade || quantidade === undefined) {\r\n-      return res.status(400).json({\r\n-        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n-      });\r\n-    }\r\n-\r\n-    const epiData = {\r\n-      nome,\r\n-      ca,\r\n-      validade, // A data de validade, ex: \"2028-12-31\"\r\n-      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n-      createdAt: new Date().toISOString(),\r\n-    };\r\n-\r\n-    const epiRef = await db.collection('epis').add(epiData);\r\n-\r\n-    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n-  } catch (error) {\r\n-    console.error('Erro ao criar EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n- */\r\n-const getAllEpis = async (req, res) => {\r\n-  try {\r\n-    const episSnapshot = await db.collection('epis').get();\r\n-    const epis = [];\r\n-    episSnapshot.forEach(doc => {\r\n-      epis.push({ id: doc.id, ...doc.data() });\r\n-    });\r\n-    return res.status(200).json(epis);\r\n-  } catch (error) {\r\n-    console.error('Erro ao buscar EPIs:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Busca um EPI específico pelo seu ID.\r\n- */\r\n-const getEpiById = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const epiRef = db.collection('epis').doc(id);\r\n-    const doc = await epiRef.get();\r\n-\r\n-    if (!doc.exists) {\r\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n-    }\r\n-\r\n-    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n-  } catch (error) {\r\n-    console.error('Erro ao buscar EPI por ID:', error);\r\n-    return res\r\n-      .status(500)\r\n-      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Atualiza um EPI existente no Firestore.\r\n- */\r\n-const updateEpi = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const data = req.body;\r\n-\r\n-    if (!id) {\r\n-      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n-    }\r\n-\r\n-    const epiRef = db.collection('epis').doc(id);\r\n-    const doc = await epiRef.get();\r\n-\r\n-    if (!doc.exists) {\r\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n-    }\r\n-\r\n-    await epiRef.update(data);\r\n-\r\n-    return res.status(200).json({ id, ...data });\r\n-  } catch (error) {\r\n-    console.error('Erro ao atualizar EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Exclui um EPI do Firestore.\r\n- */\r\n-const deleteEpi = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    await db.collection('epis').doc(id).delete();\r\n-    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n-  } catch (error) {\r\n-    console.error('Erro ao excluir EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Rota de teste.\r\n- */\r\n-const teste = async (req, res) => {\r\n-  try {\r\n-    console.log('deu certo o teste')\r\n-  } \r\n-  catch (error) {\r\n-    console.error('Erro ao teste:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor.' });\r\n-  }\r\n-};\r\n-\r\n-module.exports = {\r\n-  createEpi,\r\n-  getAllEpis,\r\n-  getEpiById,\r\n-  updateEpi,\r\n-  deleteEpi,\r\n-};\n-const { db } = require('../config/firebase');\r\n-\r\n-/**\r\n- * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n- */\r\n-const createEpi = async (req, res) => {\r\n-  try {\r\n-    const { nome, ca, validade, quantidade } = req.body;\r\n-\r\n-    // Validação básica dos campos recebidos\r\n-    if (!nome || !ca || !validade || quantidade === undefined) {\r\n-      return res.status(400).json({\r\n-        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n-      });\r\n-    }\r\n-\r\n-    const epiData = {\r\n-      nome,\r\n-      ca,\r\n-      validade, // A data de validade, ex: \"2028-12-31\"\r\n-      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n-      createdAt: new Date().toISOString(),\r\n-    };\r\n-\r\n-    const epiRef = await db.collection('epis').add(epiData);\r\n-\r\n-    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n-  } catch (error) {\r\n-    console.error('Erro ao criar EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n- */\r\n-const getAllEpis = async (req, res) => {\r\n-  try {\r\n-    const episSnapshot = await db.collection('epis').get();\r\n-    const epis = [];\r\n-    episSnapshot.forEach(doc => {\r\n-      epis.push({ id: doc.id, ...doc.data() });\r\n-    });\r\n-    return res.status(200).json(epis);\r\n-  } catch (error) {\r\n-    console.error('Erro ao buscar EPIs:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Busca um EPI específico pelo seu ID.\r\n- */\r\n-const getEpiById = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const epiRef = db.collection('epis').doc(id);\r\n-    const doc = await epiRef.get();\r\n-\r\n-    if (!doc.exists) {\r\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n-    }\r\n-\r\n-    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n-  } catch (error) {\r\n-    console.error('Erro ao buscar EPI por ID:', error);\r\n-    return res\r\n-      .status(500)\r\n-      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Atualiza um EPI existente no Firestore.\r\n- */\r\n-const updateEpi = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const data = req.body;\r\n-\r\n-    if (!id) {\r\n-      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n-    }\r\n-\r\n-    const epiRef = db.collection('epis').doc(id);\r\n-    const doc = await epiRef.get();\r\n-\r\n-    if (!doc.exists) {\r\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n-    }\r\n-\r\n-    await epiRef.update(data);\r\n-\r\n-    return res.status(200).json({ id, ...data });\r\n-  } catch (error) {\r\n-    console.error('Erro ao atualizar EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Exclui um EPI do Firestore.\r\n- */\r\n-const deleteEpi = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    await db.collection('epis').doc(id).delete();\r\n-    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n-  } catch (error) {\r\n-    console.error('Erro ao excluir EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Rota de teste.\r\n- */\r\n-const teste = async (req, res) => {\r\n-  try {\r\n-    console.log('deu certo o teste')\r\n-  } \r\n-  catch (error) {\r\n-    console.error('Erro ao teste:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n-  }\r\n-};\r\n-\r\n-module.exports = {\r\n-  createEpi,\r\n-  getAllEpis,\r\n-  getEpiById,\r\n-  updateEpi,\r\n-  deleteEpi,\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1761594266813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,136 @@\n+const { db } = require('../config/firebase');\r\n+\r\n+/**\r\n+ * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n+ */\r\n+const createEpi = async (req, res) => {\r\n+  try {\r\n+    const { nome, ca, validade, quantidade } = req.body;\r\n+\r\n+    // Validação básica dos campos recebidos\r\n+    if (!nome || !ca || !validade || quantidade === undefined) {\r\n+      return res.status(400).json({\r\n+        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n+      });\r\n+    }\r\n+\r\n+    const epiData = {\r\n+      nome,\r\n+      ca,\r\n+      validade, // A data de validade, ex: \"2028-12-31\"\r\n+      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n+      createdAt: new Date().toISOString(),\r\n+    };\r\n+\r\n+    const epiRef = await db.collection('epis').add(epiData);\r\n+\r\n+    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n+  } catch (error) {\r\n+    console.error('Erro ao criar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n+ */\r\n+const getAllEpis = async (req, res) => {\r\n+  try {\r\n+    const episSnapshot = await db.collection('epis').get();\r\n+    const epis = [];\r\n+    episSnapshot.forEach(doc => {\r\n+      epis.push({ id: doc.id, ...doc.data() });\r\n+    });\r\n+    return res.status(200).json(epis);\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPIs:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca um EPI específico pelo seu ID.\r\n+ */\r\n+const getEpiById = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPI por ID:', error);\r\n+    return res\r\n+      .status(500)\r\n+      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Atualiza um EPI existente no Firestore.\r\n+ */\r\n+const updateEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const data = req.body;\r\n+\r\n+    if (!id) {\r\n+      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n+    }\r\n+\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    await epiRef.update(data);\r\n+\r\n+    return res.status(200).json({ id, ...data });\r\n+  } catch (error) {\r\n+    console.error('Erro ao atualizar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Exclui um EPI do Firestore.\r\n+ */\r\n+const deleteEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    await db.collection('epis').doc(id).delete();\r\n+    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n+  } catch (error) {\r\n+    console.error('Erro ao excluir EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Rota de teste.\r\n+ */\r\n+const teste = async (req, res) => {\r\n+  try {\r\n+    res.\r\n+    console.log('deu certo o teste')\r\n+  } \r\n+  catch (error) {\r\n+    console.error('Erro ao teste:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor.' });\r\n+  }\r\n+};\r\n+\r\n+module.exports = {\r\n+  createEpi,\r\n+  getAllEpis,\r\n+  getEpiById,\r\n+  updateEpi,\r\n+  deleteEpi,\r\n+  teste\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1761594279791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,136 @@\n+const { db } = require('../config/firebase');\r\n+\r\n+/**\r\n+ * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n+ */\r\n+const createEpi = async (req, res) => {\r\n+  try {\r\n+    const { nome, ca, validade, quantidade } = req.body;\r\n+\r\n+    // Validação básica dos campos recebidos\r\n+    if (!nome || !ca || !validade || quantidade === undefined) {\r\n+      return res.status(400).json({\r\n+        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n+      });\r\n+    }\r\n+\r\n+    const epiData = {\r\n+      nome,\r\n+      ca,\r\n+      validade, // A data de validade, ex: \"2028-12-31\"\r\n+      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n+      createdAt: new Date().toISOString(),\r\n+    };\r\n+\r\n+    const epiRef = await db.collection('epis').add(epiData);\r\n+\r\n+    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n+  } catch (error) {\r\n+    console.error('Erro ao criar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n+ */\r\n+const getAllEpis = async (req, res) => {\r\n+  try {\r\n+    const episSnapshot = await db.collection('epis').get();\r\n+    const epis = [];\r\n+    episSnapshot.forEach(doc => {\r\n+      epis.push({ id: doc.id, ...doc.data() });\r\n+    });\r\n+    return res.status(200).json(epis);\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPIs:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca um EPI específico pelo seu ID.\r\n+ */\r\n+const getEpiById = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPI por ID:', error);\r\n+    return res\r\n+      .status(500)\r\n+      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Atualiza um EPI existente no Firestore.\r\n+ */\r\n+const updateEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const data = req.body;\r\n+\r\n+    if (!id) {\r\n+      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n+    }\r\n+\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    await epiRef.update(data);\r\n+\r\n+    return res.status(200).json({ id, ...data });\r\n+  } catch (error) {\r\n+    console.error('Erro ao atualizar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Exclui um EPI do Firestore.\r\n+ */\r\n+const deleteEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    await db.collection('epis').doc(id).delete();\r\n+    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n+  } catch (error) {\r\n+    console.error('Erro ao excluir EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Rota de teste.\r\n+ */\r\n+const teste = async (req, res) => {\r\n+  try {\r\n+    res.status(200).json({ message: 'API EPI-Backend teste!' });\r\n+    console.log('deu certo o teste')\r\n+  } \r\n+  catch (error) {\r\n+    console.error('Erro ao teste:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor.' });\r\n+  }\r\n+};\r\n+\r\n+module.exports = {\r\n+  createEpi,\r\n+  getAllEpis,\r\n+  getEpiById,\r\n+  updateEpi,\r\n+  deleteEpi,\r\n+  teste\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1761594314265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,135 @@\n+const { db } = require('../config/firebase');\r\n+\r\n+/**\r\n+ * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n+ */\r\n+const createEpi = async (req, res) => {\r\n+  try {\r\n+    const { nome, ca, validade, quantidade } = req.body;\r\n+\r\n+    // Validação básica dos campos recebidos\r\n+    if (!nome || !ca || !validade || quantidade === undefined) {\r\n+      return res.status(400).json({\r\n+        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n+      });\r\n+    }\r\n+\r\n+    const epiData = {\r\n+      nome,\r\n+      ca,\r\n+      validade, // A data de validade, ex: \"2028-12-31\"\r\n+      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n+      createdAt: new Date().toISOString(),\r\n+    };\r\n+\r\n+    const epiRef = await db.collection('epis').add(epiData);\r\n+\r\n+    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n+  } catch (error) {\r\n+    console.error('Erro ao criar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n+ */\r\n+const getAllEpis = async (req, res) => {\r\n+  try {\r\n+    const episSnapshot = await db.collection('epis').get();\r\n+    const epis = [];\r\n+    episSnapshot.forEach(doc => {\r\n+      epis.push({ id: doc.id, ...doc.data() });\r\n+    });\r\n+    return res.status(200).json(epis);\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPIs:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Busca um EPI específico pelo seu ID.\r\n+ */\r\n+const getEpiById = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n+  } catch (error) {\r\n+    console.error('Erro ao buscar EPI por ID:', error);\r\n+    return res\r\n+      .status(500)\r\n+      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Atualiza um EPI existente no Firestore.\r\n+ */\r\n+const updateEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const data = req.body;\r\n+\r\n+    if (!id) {\r\n+      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n+    }\r\n+\r\n+    const epiRef = db.collection('epis').doc(id);\r\n+    const doc = await epiRef.get();\r\n+\r\n+    if (!doc.exists) {\r\n+      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n+    }\r\n+\r\n+    await epiRef.update(data);\r\n+\r\n+    return res.status(200).json({ id, ...data });\r\n+  } catch (error) {\r\n+    console.error('Erro ao atualizar EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Exclui um EPI do Firestore.\r\n+ */\r\n+const deleteEpi = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    await db.collection('epis').doc(id).delete();\r\n+    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n+  } catch (error) {\r\n+    console.error('Erro ao excluir EPI:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n+ * Rota de teste.\r\n+ */\r\n+const teste = async (req, res) => {\r\n+  try {\r\n+    res.status(200).json({ message: 'API EPI-Backend teste!' });\r\n+  } \r\n+  catch (error) {\r\n+    console.error('Erro ao teste:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor.' });\r\n+  }\r\n+};\r\n+\r\n+module.exports = {\r\n+  createEpi,\r\n+  getAllEpis,\r\n+  getEpiById,\r\n+  updateEpi,\r\n+  deleteEpi,\r\n+  teste\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1761595262981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,433 +111,14 @@\n     return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n   }\r\n };\r\n \r\n-/**\r\n- * Rota de teste.\r\n- */\r\n-const teste = async (req, res) => {\r\n-  try {\r\n-    res.status(200).json({ message: 'API EPI-Backend teste!' });\r\n-  } \r\n-  catch (error) {\r\n-    console.error('Erro ao teste:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor.' });\r\n-  }\r\n-};\r\n \r\n-module.exports = {\r\n-  createEpi,\r\n-  getAllEpis,\r\n-  getEpiById,\r\n-  updateEpi,\r\n-  deleteEpi,\r\n-  teste\r\n-};\n-const { db } = require('../config/firebase');\r\n \r\n-/**\r\n- * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n- */\r\n-const createEpi = async (req, res) => {\r\n-  try {\r\n-    const { nome, ca, validade, quantidade } = req.body;\r\n-\r\n-    // Validação básica dos campos recebidos\r\n-    if (!nome || !ca || !validade || quantidade === undefined) {\r\n-      return res.status(400).json({\r\n-        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n-      });\r\n-    }\r\n-\r\n-    const epiData = {\r\n-      nome,\r\n-      ca,\r\n-      validade, // A data de validade, ex: \"2028-12-31\"\r\n-      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n-      createdAt: new Date().toISOString(),\r\n-    };\r\n-\r\n-    const epiRef = await db.collection('epis').add(epiData);\r\n-\r\n-    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n-  } catch (error) {\r\n-    console.error('Erro ao criar EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n- */\r\n-const getAllEpis = async (req, res) => {\r\n-  try {\r\n-    const episSnapshot = await db.collection('epis').get();\r\n-    const epis = [];\r\n-    episSnapshot.forEach(doc => {\r\n-      epis.push({ id: doc.id, ...doc.data() });\r\n-    });\r\n-    return res.status(200).json(epis);\r\n-  } catch (error) {\r\n-    console.error('Erro ao buscar EPIs:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Busca um EPI específico pelo seu ID.\r\n- */\r\n-const getEpiById = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const epiRef = db.collection('epis').doc(id);\r\n-    const doc = await epiRef.get();\r\n-\r\n-    if (!doc.exists) {\r\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n-    }\r\n-\r\n-    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n-  } catch (error) {\r\n-    console.error('Erro ao buscar EPI por ID:', error);\r\n-    return res\r\n-      .status(500)\r\n-      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Atualiza um EPI existente no Firestore.\r\n- */\r\n-const updateEpi = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const data = req.body;\r\n-\r\n-    if (!id) {\r\n-      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n-    }\r\n-\r\n-    const epiRef = db.collection('epis').doc(id);\r\n-    const doc = await epiRef.get();\r\n-\r\n-    if (!doc.exists) {\r\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n-    }\r\n-\r\n-    await epiRef.update(data);\r\n-\r\n-    return res.status(200).json({ id, ...data });\r\n-  } catch (error) {\r\n-    console.error('Erro ao atualizar EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Exclui um EPI do Firestore.\r\n- */\r\n-const deleteEpi = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    await db.collection('epis').doc(id).delete();\r\n-    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n-  } catch (error) {\r\n-    console.error('Erro ao excluir EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Rota de teste.\r\n- */\r\n-const teste = async (req, res) => {\r\n-  try {\r\n-    res.status(200).json({ message: 'API EPI-Backend teste!' });\r\n-    console.log('deu certo o teste')\r\n-  } \r\n-  catch (error) {\r\n-    console.error('Erro ao teste:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor.' });\r\n-  }\r\n-};\r\n-\r\n module.exports = {\r\n   createEpi,\r\n   getAllEpis,\r\n   getEpiById,\r\n   updateEpi,\r\n   deleteEpi,\r\n   teste\r\n-};\n-const { db } = require('../config/firebase');\r\n-\r\n-/**\r\n- * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n- */\r\n-const createEpi = async (req, res) => {\r\n-  try {\r\n-    const { nome, ca, validade, quantidade } = req.body;\r\n-\r\n-    // Validação básica dos campos recebidos\r\n-    if (!nome || !ca || !validade || quantidade === undefined) {\r\n-      return res.status(400).json({\r\n-        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n-      });\r\n-    }\r\n-\r\n-    const epiData = {\r\n-      nome,\r\n-      ca,\r\n-      validade, // A data de validade, ex: \"2028-12-31\"\r\n-      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n-      createdAt: new Date().toISOString(),\r\n-    };\r\n-\r\n-    const epiRef = await db.collection('epis').add(epiData);\r\n-\r\n-    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n-  } catch (error) {\r\n-    console.error('Erro ao criar EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n- */\r\n-const getAllEpis = async (req, res) => {\r\n-  try {\r\n-    const episSnapshot = await db.collection('epis').get();\r\n-    const epis = [];\r\n-    episSnapshot.forEach(doc => {\r\n-      epis.push({ id: doc.id, ...doc.data() });\r\n-    });\r\n-    return res.status(200).json(epis);\r\n-  } catch (error) {\r\n-    console.error('Erro ao buscar EPIs:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Busca um EPI específico pelo seu ID.\r\n- */\r\n-const getEpiById = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const epiRef = db.collection('epis').doc(id);\r\n-    const doc = await epiRef.get();\r\n-\r\n-    if (!doc.exists) {\r\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n-    }\r\n-\r\n-    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n-  } catch (error) {\r\n-    console.error('Erro ao buscar EPI por ID:', error);\r\n-    return res\r\n-      .status(500)\r\n-      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Atualiza um EPI existente no Firestore.\r\n- */\r\n-const updateEpi = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const data = req.body;\r\n-\r\n-    if (!id) {\r\n-      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n-    }\r\n-\r\n-    const epiRef = db.collection('epis').doc(id);\r\n-    const doc = await epiRef.get();\r\n-\r\n-    if (!doc.exists) {\r\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n-    }\r\n-\r\n-    await epiRef.update(data);\r\n-\r\n-    return res.status(200).json({ id, ...data });\r\n-  } catch (error) {\r\n-    console.error('Erro ao atualizar EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Exclui um EPI do Firestore.\r\n- */\r\n-const deleteEpi = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    await db.collection('epis').doc(id).delete();\r\n-    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n-  } catch (error) {\r\n-    console.error('Erro ao excluir EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Rota de teste.\r\n- */\r\n-const teste = async (req, res) => {\r\n-  try {\r\n-    res.\r\n-    console.log('deu certo o teste')\r\n-  } \r\n-  catch (error) {\r\n-    console.error('Erro ao teste:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor.' });\r\n-  }\r\n-};\r\n-\r\n-module.exports = {\r\n-  createEpi,\r\n-  getAllEpis,\r\n-  getEpiById,\r\n-  updateEpi,\r\n-  deleteEpi,\r\n-  teste\r\n-};\n-const { db } = require('../config/firebase');\r\n-\r\n-/**\r\n- * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n- */\r\n-const createEpi = async (req, res) => {\r\n-  try {\r\n-    const { nome, ca, validade, quantidade } = req.body;\r\n-\r\n-    // Validação básica dos campos recebidos\r\n-    if (!nome || !ca || !validade || quantidade === undefined) {\r\n-      return res.status(400).json({\r\n-        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\r\n-      });\r\n-    }\r\n-\r\n-    const epiData = {\r\n-      nome,\r\n-      ca,\r\n-      validade, // A data de validade, ex: \"2028-12-31\"\r\n-      quantidade: Number(quantidade), // Garante que a quantidade seja um número\r\n-      createdAt: new Date().toISOString(),\r\n-    };\r\n-\r\n-    const epiRef = await db.collection('epis').add(epiData);\r\n-\r\n-    return res.status(201).json({ id: epiRef.id, ...epiData });\r\n-  } catch (error) {\r\n-    console.error('Erro ao criar EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Busca todos os Equipamentos de Proteção Individual (EPIs) no Firestore.\r\n- */\r\n-const getAllEpis = async (req, res) => {\r\n-  try {\r\n-    const episSnapshot = await db.collection('epis').get();\r\n-    const epis = [];\r\n-    episSnapshot.forEach(doc => {\r\n-      epis.push({ id: doc.id, ...doc.data() });\r\n-    });\r\n-    return res.status(200).json(epis);\r\n-  } catch (error) {\r\n-    console.error('Erro ao buscar EPIs:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao buscar EPIs.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Busca um EPI específico pelo seu ID.\r\n- */\r\n-const getEpiById = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const epiRef = db.collection('epis').doc(id);\r\n-    const doc = await epiRef.get();\r\n-\r\n-    if (!doc.exists) {\r\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n-    }\r\n-\r\n-    return res.status(200).json({ id: doc.id, ...doc.data() });\r\n-  } catch (error) {\r\n-    console.error('Erro ao buscar EPI por ID:', error);\r\n-    return res\r\n-      .status(500)\r\n-      .json({ error: 'Erro interno do servidor ao buscar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Atualiza um EPI existente no Firestore.\r\n- */\r\n-const updateEpi = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    const data = req.body;\r\n-\r\n-    if (!id) {\r\n-      return res.status(400).json({ error: 'O ID do EPI é obrigatório.' });\r\n-    }\r\n-\r\n-    const epiRef = db.collection('epis').doc(id);\r\n-    const doc = await epiRef.get();\r\n-\r\n-    if (!doc.exists) {\r\n-      return res.status(404).json({ error: 'EPI não encontrado.' });\r\n-    }\r\n-\r\n-    await epiRef.update(data);\r\n-\r\n-    return res.status(200).json({ id, ...data });\r\n-  } catch (error) {\r\n-    console.error('Erro ao atualizar EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao atualizar EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Exclui um EPI do Firestore.\r\n- */\r\n-const deleteEpi = async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    await db.collection('epis').doc(id).delete();\r\n-    return res.status(200).json({ message: 'EPI excluído com sucesso.' });\r\n-  } catch (error) {\r\n-    console.error('Erro ao excluir EPI:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor ao excluir EPI.' });\r\n-  }\r\n-};\r\n-\r\n-/**\r\n- * Rota de teste.\r\n- */\r\n-const teste = async (req, res) => {\r\n-  try {\r\n-    \r\n-    console.log('deu certo o teste')\r\n-  } \r\n-  catch (error) {\r\n-    console.error('Erro ao teste:', error);\r\n-    return res.status(500).json({ error: 'Erro interno do servidor.' });\r\n-  }\r\n-};\r\n-\r\n-module.exports = {\r\n-  createEpi,\r\n-  getAllEpis,\r\n-  getEpiById,\r\n-  updateEpi,\r\n-  deleteEpi,\r\n-  teste\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1761595269389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,20 @@\n const { db } = require('../config/firebase');\r\n \r\n /**\r\n+ * Rota de teste.\r\n+ */\r\n+const teste = async (req, res) => {\r\n+  try {\r\n+    res.status(200).json({ message: 'API EPI-Backend teste!' });\r\n+  }\r\n+  catch (error) {\r\n+    console.error('Erro ao teste:', error);\r\n+    return res.status(500).json({ error: 'Erro interno do servidor.' });\r\n+  }\r\n+};\r\n+\r\n+/**\r\n  * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\r\n  */\r\n const createEpi = async (req, res) => {\r\n   try {\r\n"
                },
                {
                    "date": 1761608850666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n  */\r\n const teste = async (req, res) => {\r\n   try {\r\n     res.status(200).json({ message: 'API EPI-Backend teste!' });\r\n+    return res.status(200).json({ message: 'API EPI-Backend rota de teste!' });\r\n   }\r\n   catch (error) {\r\n     console.error('Erro ao teste:', error);\r\n     return res.status(500).json({ error: 'Erro interno do servidor.' });\r\n"
                }
            ],
            "date": 1759699050781,
            "name": "Commit-0",
            "content": "const { db } = require('../config/firebase');\n\n/**\n * Cria um novo Equipamento de Proteção Individual (EPI) no Firestore.\n */\nconst createEpi = async (req, res) => {\n  try {\n    const { nome, ca, validade, quantidade } = req.body;\n\n    // Validação básica dos campos recebidos\n    if (!nome || !ca || !validade || quantidade === undefined) {\n      return res.status(400).json({\n        error: 'Todos os campos são obrigatórios: nome, ca, validade, quantidade.',\n      });\n    }\n\n    const epiData = {\n      nome,\n      ca,\n      validade, // A data de validade, ex: \"2028-12-31\"\n      quantidade: Number(quantidade), // Garante que a quantidade seja um número\n      createdAt: new Date().toISOString(),\n    };\n\n    const epiRef = await db.collection('epis').add(epiData);\n\n    return res.status(201).json({ id: epiRef.id, ...epiData });\n  } catch (error) {\n    console.error('Erro ao criar EPI:', error);\n    return res.status(500).json({ error: 'Erro interno do servidor ao criar EPI.' });\n  }\n};\n\nmodule.exports = {\n  createEpi,\n};"
        }
    ]
}