{
    "sourceFile": "index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1759504604668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759504612879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,46 +0,0 @@\n-// Carrega as variáveis de ambiente do arquivo .env\n-require('dotenv').config();\n-\n-// Inicializa o Firebase Admin SDK\n-require('./config/firebase');\n-\n-const express = require('express');\n-const cors = require('cors');\n-const helmet = require('helmet');\n-const morgan = require('morgan');\n-const rateLimit = require('express-rate-limit');\n-\n-const app = express();\n-\n-// Middlewares de segurança e utilitários\n-app.use(helmet()); // Adiciona cabeçalhos de segurança\n-app.use(cors()); // Habilita Cross-Origin Resource Sharing\n-app.use(morgan('dev')); // Logger de requisições HTTP\n-app.use(express.json()); // Parser para body de requisições JSON\n-app.use(express.urlencoded({ extended: true })); // Parser para body de requisições URL-encoded\n-\n-// Middleware de limite de requisições\n-const limiter = rateLimit({\n-  windowMs: 15 * 60 * 1000, // 15 minutos\n-  max: 100, // Limita cada IP a 100 requisições por janela\n-  standardHeaders: true, // Retorna informações do limite nos cabeçalhos `RateLimit-*`\n-  legacyHeaders: false, // Desabilita os cabeçalhos `X-RateLimit-*`\n-  message: 'Muitas requisições vindas deste IP, por favor tente novamente após 15 minutos.',\n-});\n-app.use(limiter);\n-\n-// Rota de teste inicial\n-app.get('/', (req, res) => {\n-  res.status(200).json({ message: 'API EPI-Backend está funcionando!' });\n-});\n-\n-// --- Adicione suas rotas aqui ---\n-\n-// Porta do servidor\n-const PORT = process.env.PORT || 8080;\n-\n-app.listen(PORT, () => {\n-  console.log(`Servidor rodando na porta ${PORT}`);\n-});\n-\n-module.exports = app;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1759504628613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,46 @@\n+// Carrega as variáveis de ambiente do arquivo .env\n+require('dotenv').config();\n+\n+// Inicializa o Firebase Admin SDK\n+require('./config/firebase');\n+\n+const express = require('express');\n+const cors = require('cors');\n+const helmet = require('helmet');\n+const morgan = require('morgan');\n+const rateLimit = require('express-rate-limit');\n+\n+const app = express();\n+\n+// Middlewares de segurança e utilitários\n+app.use(helmet()); // Adiciona cabeçalhos de segurança\n+app.use(cors()); // Habilita Cross-Origin Resource Sharing\n+app.use(morgan('dev')); // Logger de requisições HTTP\n+app.use(express.json()); // Parser para body de requisições JSON\n+app.use(express.urlencoded({ extended: true })); // Parser para body de requisições URL-encoded\n+\n+// Middleware de limite de requisições\n+const limiter = rateLimit({\n+  windowMs: 15 * 60 * 1000, // 15 minutos\n+  max: 100, // Limita cada IP a 100 requisições por janela\n+  standardHeaders: true, // Retorna informações do limite nos cabeçalhos `RateLimit-*`\n+  legacyHeaders: false, // Desabilita os cabeçalhos `X-RateLimit-*`\n+  message: 'Muitas requisições vindas deste IP, por favor tente novamente após 15 minutos.',\n+});\n+app.use(limiter);\n+\n+// Rota de teste inicial\n+app.get('/', (req, res) => {\n+  res.status(200).json({ message: 'API EPI-Backend está funcionando!' });\n+});\n+\n+// --- Adicione suas rotas aqui ---\n+\n+// Porta do servidor\n+const PORT = process.env.PORT || 8080;\n+\n+app.listen(PORT, () => {\n+  console.log(`Servidor rodando na porta ${PORT}`);\n+});\n+\n+module.exports = app;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1759505099377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,46 +0,0 @@\n-// Carrega as variáveis de ambiente do arquivo .env\n-require('dotenv').config();\n-\n-// Inicializa o Firebase Admin SDK\n-require('./config/firebase');\n-\n-const express = require('express');\n-const cors = require('cors');\n-const helmet = require('helmet');\n-const morgan = require('morgan');\n-const rateLimit = require('express-rate-limit');\n-\n-const app = express();\n-\n-// Middlewares de segurança e utilitários\n-app.use(helmet()); // Adiciona cabeçalhos de segurança\n-app.use(cors()); // Habilita Cross-Origin Resource Sharing\n-app.use(morgan('dev')); // Logger de requisições HTTP\n-app.use(express.json()); // Parser para body de requisições JSON\n-app.use(express.urlencoded({ extended: true })); // Parser para body de requisições URL-encoded\n-\n-// Middleware de limite de requisições\n-const limiter = rateLimit({\n-  windowMs: 15 * 60 * 1000, // 15 minutos\n-  max: 100, // Limita cada IP a 100 requisições por janela\n-  standardHeaders: true, // Retorna informações do limite nos cabeçalhos `RateLimit-*`\n-  legacyHeaders: false, // Desabilita os cabeçalhos `X-RateLimit-*`\n-  message: 'Muitas requisições vindas deste IP, por favor tente novamente após 15 minutos.',\n-});\n-app.use(limiter);\n-\n-// Rota de teste inicial\n-app.get('/', (req, res) => {\n-  res.status(200).json({ message: 'API EPI-Backend está funcionando!' });\n-});\n-\n-// --- Adicione suas rotas aqui ---\n-\n-// Porta do servidor\n-const PORT = process.env.PORT || 8080;\n-\n-app.listen(PORT, () => {\n-  console.log(`Servidor rodando na porta ${PORT}`);\n-});\n-\n-module.exports = app;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1759504604668,
            "name": "Commit-0",
            "content": "// Carrega as variáveis de ambiente do arquivo .env\nrequire('dotenv').config();\n\n// Inicializa o Firebase Admin SDK\nrequire('./config/firebase');\n\nconst express = require('express');\nconst cors = require('cors');\nconst helmet = require('helmet');\nconst morgan = require('morgan');\nconst rateLimit = require('express-rate-limit');\n\nconst app = express();\n\n// Middlewares de segurança e utilitários\napp.use(helmet()); // Adiciona cabeçalhos de segurança\napp.use(cors()); // Habilita Cross-Origin Resource Sharing\napp.use(morgan('dev')); // Logger de requisições HTTP\napp.use(express.json()); // Parser para body de requisições JSON\napp.use(express.urlencoded({ extended: true })); // Parser para body de requisições URL-encoded\n\n// Middleware de limite de requisições\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutos\n  max: 100, // Limita cada IP a 100 requisições por janela\n  standardHeaders: true, // Retorna informações do limite nos cabeçalhos `RateLimit-*`\n  legacyHeaders: false, // Desabilita os cabeçalhos `X-RateLimit-*`\n  message: 'Muitas requisições vindas deste IP, por favor tente novamente após 15 minutos.',\n});\napp.use(limiter);\n\n// Rota de teste inicial\napp.get('/', (req, res) => {\n  res.status(200).json({ message: 'API EPI-Backend está funcionando!' });\n});\n\n// --- Adicione suas rotas aqui ---\n\n// Porta do servidor\nconst PORT = process.env.PORT || 8080;\n\napp.listen(PORT, () => {\n  console.log(`Servidor rodando na porta ${PORT}`);\n});\n\nmodule.exports = app;\n"
        }
    ]
}